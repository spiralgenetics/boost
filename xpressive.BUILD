package(default_visibility = ["//visibility:public"])

cc_library(
    name = "headers_only",
    hdrs = [
        "include/boost/xpressive/basic_regex.hpp",
        "include/boost/xpressive/detail/core/access.hpp",
        "include/boost/xpressive/detail/core/action.hpp",
        "include/boost/xpressive/detail/core/adaptor.hpp",
        "include/boost/xpressive/detail/core/finder.hpp",
        "include/boost/xpressive/detail/core/flow_control.hpp",
        "include/boost/xpressive/detail/core/icase.hpp",
        "include/boost/xpressive/detail/core/linker.hpp",
        "include/boost/xpressive/detail/core/list.hpp",
        "include/boost/xpressive/detail/core/matcher/action_matcher.hpp",
        "include/boost/xpressive/detail/core/matcher/alternate_end_matcher.hpp",
        "include/boost/xpressive/detail/core/matcher/alternate_matcher.hpp",
        "include/boost/xpressive/detail/core/matcher/any_matcher.hpp",
        "include/boost/xpressive/detail/core/matcher/assert_bol_matcher.hpp",
        "include/boost/xpressive/detail/core/matcher/assert_bos_matcher.hpp",
        "include/boost/xpressive/detail/core/matcher/assert_eol_matcher.hpp",
        "include/boost/xpressive/detail/core/matcher/assert_eos_matcher.hpp",
        "include/boost/xpressive/detail/core/matcher/assert_line_base.hpp",
        "include/boost/xpressive/detail/core/matcher/assert_word_matcher.hpp",
        "include/boost/xpressive/detail/core/matcher/attr_begin_matcher.hpp",
        "include/boost/xpressive/detail/core/matcher/attr_end_matcher.hpp",
        "include/boost/xpressive/detail/core/matcher/attr_matcher.hpp",
        "include/boost/xpressive/detail/core/matcher/charset_matcher.hpp",
        "include/boost/xpressive/detail/core/matcher/end_matcher.hpp",
        "include/boost/xpressive/detail/core/matcher/epsilon_matcher.hpp",
        "include/boost/xpressive/detail/core/matcher/keeper_matcher.hpp",
        "include/boost/xpressive/detail/core/matcher/literal_matcher.hpp",
        "include/boost/xpressive/detail/core/matcher/logical_newline_matcher.hpp",
        "include/boost/xpressive/detail/core/matcher/lookahead_matcher.hpp",
        "include/boost/xpressive/detail/core/matcher/lookbehind_matcher.hpp",
        "include/boost/xpressive/detail/core/matcher/mark_begin_matcher.hpp",
        "include/boost/xpressive/detail/core/matcher/mark_end_matcher.hpp",
        "include/boost/xpressive/detail/core/matcher/mark_matcher.hpp",
        "include/boost/xpressive/detail/core/matcher/optional_matcher.hpp",
        "include/boost/xpressive/detail/core/matcher/posix_charset_matcher.hpp",
        "include/boost/xpressive/detail/core/matcher/predicate_matcher.hpp",
        "include/boost/xpressive/detail/core/matcher/range_matcher.hpp",
        "include/boost/xpressive/detail/core/matcher/regex_byref_matcher.hpp",
        "include/boost/xpressive/detail/core/matcher/regex_matcher.hpp",
        "include/boost/xpressive/detail/core/matcher/repeat_begin_matcher.hpp",
        "include/boost/xpressive/detail/core/matcher/repeat_end_matcher.hpp",
        "include/boost/xpressive/detail/core/matcher/set_matcher.hpp",
        "include/boost/xpressive/detail/core/matcher/simple_repeat_matcher.hpp",
        "include/boost/xpressive/detail/core/matcher/string_matcher.hpp",
        "include/boost/xpressive/detail/core/matcher/true_matcher.hpp",
        "include/boost/xpressive/detail/core/matchers.hpp",
        "include/boost/xpressive/detail/core/optimize.hpp",
        "include/boost/xpressive/detail/core/peeker.hpp",
        "include/boost/xpressive/detail/core/quant_style.hpp",
        "include/boost/xpressive/detail/core/regex_domain.hpp",
        "include/boost/xpressive/detail/core/regex_impl.hpp",
        "include/boost/xpressive/detail/core/results_cache.hpp",
        "include/boost/xpressive/detail/core/state.hpp",
        "include/boost/xpressive/detail/core/sub_match_impl.hpp",
        "include/boost/xpressive/detail/core/sub_match_vector.hpp",
        "include/boost/xpressive/detail/detail_fwd.hpp",
        "include/boost/xpressive/detail/dynamic/dynamic.hpp",
        "include/boost/xpressive/detail/dynamic/matchable.hpp",
        "include/boost/xpressive/detail/dynamic/parse_charset.hpp",
        "include/boost/xpressive/detail/dynamic/parser.hpp",
        "include/boost/xpressive/detail/dynamic/parser_enum.hpp",
        "include/boost/xpressive/detail/dynamic/parser_traits.hpp",
        "include/boost/xpressive/detail/dynamic/sequence.hpp",
        "include/boost/xpressive/detail/static/compile.hpp",
        "include/boost/xpressive/detail/static/grammar.hpp",
        "include/boost/xpressive/detail/static/is_pure.hpp",
        "include/boost/xpressive/detail/static/modifier.hpp",
        "include/boost/xpressive/detail/static/placeholders.hpp",
        "include/boost/xpressive/detail/static/static.hpp",
        "include/boost/xpressive/detail/static/transforms/as_action.hpp",
        "include/boost/xpressive/detail/static/transforms/as_alternate.hpp",
        "include/boost/xpressive/detail/static/transforms/as_independent.hpp",
        "include/boost/xpressive/detail/static/transforms/as_inverse.hpp",
        "include/boost/xpressive/detail/static/transforms/as_marker.hpp",
        "include/boost/xpressive/detail/static/transforms/as_matcher.hpp",
        "include/boost/xpressive/detail/static/transforms/as_modifier.hpp",
        "include/boost/xpressive/detail/static/transforms/as_quantifier.hpp",
        "include/boost/xpressive/detail/static/transforms/as_sequence.hpp",
        "include/boost/xpressive/detail/static/transforms/as_set.hpp",
        "include/boost/xpressive/detail/static/transmogrify.hpp",
        "include/boost/xpressive/detail/static/type_traits.hpp",
        "include/boost/xpressive/detail/static/visitor.hpp",
        "include/boost/xpressive/detail/static/width_of.hpp",
        "include/boost/xpressive/detail/utility/algorithm.hpp",
        "include/boost/xpressive/detail/utility/any.hpp",
        "include/boost/xpressive/detail/utility/boyer_moore.hpp",
        "include/boost/xpressive/detail/utility/chset/basic_chset.hpp",
        "include/boost/xpressive/detail/utility/chset/basic_chset.ipp",
        "include/boost/xpressive/detail/utility/chset/chset.hpp",
        "include/boost/xpressive/detail/utility/chset/range_run.hpp",
        "include/boost/xpressive/detail/utility/chset/range_run.ipp",
        "include/boost/xpressive/detail/utility/cons.hpp",
        "include/boost/xpressive/detail/utility/counted_base.hpp",
        "include/boost/xpressive/detail/utility/dont_care.hpp",
        "include/boost/xpressive/detail/utility/hash_peek_bitset.hpp",
        "include/boost/xpressive/detail/utility/ignore_unused.hpp",
        "include/boost/xpressive/detail/utility/literals.hpp",
        "include/boost/xpressive/detail/utility/never_true.hpp",
        "include/boost/xpressive/detail/utility/save_restore.hpp",
        "include/boost/xpressive/detail/utility/sequence_stack.hpp",
        "include/boost/xpressive/detail/utility/symbols.hpp",
        "include/boost/xpressive/detail/utility/tracking_ptr.hpp",
        "include/boost/xpressive/detail/utility/traits_utils.hpp",
        "include/boost/xpressive/detail/utility/width.hpp",
        "include/boost/xpressive/match_results.hpp",
        "include/boost/xpressive/regex_actions.hpp",
        "include/boost/xpressive/regex_algorithms.hpp",
        "include/boost/xpressive/regex_compiler.hpp",
        "include/boost/xpressive/regex_constants.hpp",
        "include/boost/xpressive/regex_error.hpp",
        "include/boost/xpressive/regex_iterator.hpp",
        "include/boost/xpressive/regex_primitives.hpp",
        "include/boost/xpressive/regex_token_iterator.hpp",
        "include/boost/xpressive/regex_traits.hpp",
        "include/boost/xpressive/sub_match.hpp",
        "include/boost/xpressive/traits/c_regex_traits.hpp",
        "include/boost/xpressive/traits/cpp_regex_traits.hpp",
        "include/boost/xpressive/traits/detail/c_ctype.hpp",
        "include/boost/xpressive/traits/null_regex_traits.hpp",
        "include/boost/xpressive/xpressive.hpp",
        "include/boost/xpressive/xpressive_dynamic.hpp",
        "include/boost/xpressive/xpressive_fwd.hpp",
        "include/boost/xpressive/xpressive_static.hpp",
        "include/boost/xpressive/xpressive_typeof.hpp",
    ],
    includes = [
        "include",
    ],
)

cc_library(
    name = "xpressive",
    srcs = [],
    hdrs = [
        "include/boost/xpressive/basic_regex.hpp",
        "include/boost/xpressive/detail/core/access.hpp",
        "include/boost/xpressive/detail/core/action.hpp",
        "include/boost/xpressive/detail/core/adaptor.hpp",
        "include/boost/xpressive/detail/core/finder.hpp",
        "include/boost/xpressive/detail/core/flow_control.hpp",
        "include/boost/xpressive/detail/core/icase.hpp",
        "include/boost/xpressive/detail/core/linker.hpp",
        "include/boost/xpressive/detail/core/list.hpp",
        "include/boost/xpressive/detail/core/matcher/action_matcher.hpp",
        "include/boost/xpressive/detail/core/matcher/alternate_end_matcher.hpp",
        "include/boost/xpressive/detail/core/matcher/alternate_matcher.hpp",
        "include/boost/xpressive/detail/core/matcher/any_matcher.hpp",
        "include/boost/xpressive/detail/core/matcher/assert_bol_matcher.hpp",
        "include/boost/xpressive/detail/core/matcher/assert_bos_matcher.hpp",
        "include/boost/xpressive/detail/core/matcher/assert_eol_matcher.hpp",
        "include/boost/xpressive/detail/core/matcher/assert_eos_matcher.hpp",
        "include/boost/xpressive/detail/core/matcher/assert_line_base.hpp",
        "include/boost/xpressive/detail/core/matcher/assert_word_matcher.hpp",
        "include/boost/xpressive/detail/core/matcher/attr_begin_matcher.hpp",
        "include/boost/xpressive/detail/core/matcher/attr_end_matcher.hpp",
        "include/boost/xpressive/detail/core/matcher/attr_matcher.hpp",
        "include/boost/xpressive/detail/core/matcher/charset_matcher.hpp",
        "include/boost/xpressive/detail/core/matcher/end_matcher.hpp",
        "include/boost/xpressive/detail/core/matcher/epsilon_matcher.hpp",
        "include/boost/xpressive/detail/core/matcher/keeper_matcher.hpp",
        "include/boost/xpressive/detail/core/matcher/literal_matcher.hpp",
        "include/boost/xpressive/detail/core/matcher/logical_newline_matcher.hpp",
        "include/boost/xpressive/detail/core/matcher/lookahead_matcher.hpp",
        "include/boost/xpressive/detail/core/matcher/lookbehind_matcher.hpp",
        "include/boost/xpressive/detail/core/matcher/mark_begin_matcher.hpp",
        "include/boost/xpressive/detail/core/matcher/mark_end_matcher.hpp",
        "include/boost/xpressive/detail/core/matcher/mark_matcher.hpp",
        "include/boost/xpressive/detail/core/matcher/optional_matcher.hpp",
        "include/boost/xpressive/detail/core/matcher/posix_charset_matcher.hpp",
        "include/boost/xpressive/detail/core/matcher/predicate_matcher.hpp",
        "include/boost/xpressive/detail/core/matcher/range_matcher.hpp",
        "include/boost/xpressive/detail/core/matcher/regex_byref_matcher.hpp",
        "include/boost/xpressive/detail/core/matcher/regex_matcher.hpp",
        "include/boost/xpressive/detail/core/matcher/repeat_begin_matcher.hpp",
        "include/boost/xpressive/detail/core/matcher/repeat_end_matcher.hpp",
        "include/boost/xpressive/detail/core/matcher/set_matcher.hpp",
        "include/boost/xpressive/detail/core/matcher/simple_repeat_matcher.hpp",
        "include/boost/xpressive/detail/core/matcher/string_matcher.hpp",
        "include/boost/xpressive/detail/core/matcher/true_matcher.hpp",
        "include/boost/xpressive/detail/core/matchers.hpp",
        "include/boost/xpressive/detail/core/optimize.hpp",
        "include/boost/xpressive/detail/core/peeker.hpp",
        "include/boost/xpressive/detail/core/quant_style.hpp",
        "include/boost/xpressive/detail/core/regex_domain.hpp",
        "include/boost/xpressive/detail/core/regex_impl.hpp",
        "include/boost/xpressive/detail/core/results_cache.hpp",
        "include/boost/xpressive/detail/core/state.hpp",
        "include/boost/xpressive/detail/core/sub_match_impl.hpp",
        "include/boost/xpressive/detail/core/sub_match_vector.hpp",
        "include/boost/xpressive/detail/detail_fwd.hpp",
        "include/boost/xpressive/detail/dynamic/dynamic.hpp",
        "include/boost/xpressive/detail/dynamic/matchable.hpp",
        "include/boost/xpressive/detail/dynamic/parse_charset.hpp",
        "include/boost/xpressive/detail/dynamic/parser.hpp",
        "include/boost/xpressive/detail/dynamic/parser_enum.hpp",
        "include/boost/xpressive/detail/dynamic/parser_traits.hpp",
        "include/boost/xpressive/detail/dynamic/sequence.hpp",
        "include/boost/xpressive/detail/static/compile.hpp",
        "include/boost/xpressive/detail/static/grammar.hpp",
        "include/boost/xpressive/detail/static/is_pure.hpp",
        "include/boost/xpressive/detail/static/modifier.hpp",
        "include/boost/xpressive/detail/static/placeholders.hpp",
        "include/boost/xpressive/detail/static/static.hpp",
        "include/boost/xpressive/detail/static/transforms/as_action.hpp",
        "include/boost/xpressive/detail/static/transforms/as_alternate.hpp",
        "include/boost/xpressive/detail/static/transforms/as_independent.hpp",
        "include/boost/xpressive/detail/static/transforms/as_inverse.hpp",
        "include/boost/xpressive/detail/static/transforms/as_marker.hpp",
        "include/boost/xpressive/detail/static/transforms/as_matcher.hpp",
        "include/boost/xpressive/detail/static/transforms/as_modifier.hpp",
        "include/boost/xpressive/detail/static/transforms/as_quantifier.hpp",
        "include/boost/xpressive/detail/static/transforms/as_sequence.hpp",
        "include/boost/xpressive/detail/static/transforms/as_set.hpp",
        "include/boost/xpressive/detail/static/transmogrify.hpp",
        "include/boost/xpressive/detail/static/type_traits.hpp",
        "include/boost/xpressive/detail/static/visitor.hpp",
        "include/boost/xpressive/detail/static/width_of.hpp",
        "include/boost/xpressive/detail/utility/algorithm.hpp",
        "include/boost/xpressive/detail/utility/any.hpp",
        "include/boost/xpressive/detail/utility/boyer_moore.hpp",
        "include/boost/xpressive/detail/utility/chset/basic_chset.hpp",
        "include/boost/xpressive/detail/utility/chset/basic_chset.ipp",
        "include/boost/xpressive/detail/utility/chset/chset.hpp",
        "include/boost/xpressive/detail/utility/chset/range_run.hpp",
        "include/boost/xpressive/detail/utility/chset/range_run.ipp",
        "include/boost/xpressive/detail/utility/cons.hpp",
        "include/boost/xpressive/detail/utility/counted_base.hpp",
        "include/boost/xpressive/detail/utility/dont_care.hpp",
        "include/boost/xpressive/detail/utility/hash_peek_bitset.hpp",
        "include/boost/xpressive/detail/utility/ignore_unused.hpp",
        "include/boost/xpressive/detail/utility/literals.hpp",
        "include/boost/xpressive/detail/utility/never_true.hpp",
        "include/boost/xpressive/detail/utility/save_restore.hpp",
        "include/boost/xpressive/detail/utility/sequence_stack.hpp",
        "include/boost/xpressive/detail/utility/symbols.hpp",
        "include/boost/xpressive/detail/utility/tracking_ptr.hpp",
        "include/boost/xpressive/detail/utility/traits_utils.hpp",
        "include/boost/xpressive/detail/utility/width.hpp",
        "include/boost/xpressive/match_results.hpp",
        "include/boost/xpressive/regex_actions.hpp",
        "include/boost/xpressive/regex_algorithms.hpp",
        "include/boost/xpressive/regex_compiler.hpp",
        "include/boost/xpressive/regex_constants.hpp",
        "include/boost/xpressive/regex_error.hpp",
        "include/boost/xpressive/regex_iterator.hpp",
        "include/boost/xpressive/regex_primitives.hpp",
        "include/boost/xpressive/regex_token_iterator.hpp",
        "include/boost/xpressive/regex_traits.hpp",
        "include/boost/xpressive/sub_match.hpp",
        "include/boost/xpressive/traits/c_regex_traits.hpp",
        "include/boost/xpressive/traits/cpp_regex_traits.hpp",
        "include/boost/xpressive/traits/detail/c_ctype.hpp",
        "include/boost/xpressive/traits/null_regex_traits.hpp",
        "include/boost/xpressive/xpressive.hpp",
        "include/boost/xpressive/xpressive_dynamic.hpp",
        "include/boost/xpressive/xpressive_fwd.hpp",
        "include/boost/xpressive/xpressive_static.hpp",
        "include/boost/xpressive/xpressive_typeof.hpp",
    ],
    copts = [],
    deps = [
        ":headers_only",
        # Because of boost/shared_ptr.hpp:
        "@boost_smart_ptr//:headers_only",
        # Because of boost/noncopyable.hpp:
        "@boost_core//:headers_only",
        # Because of boost/mpl/if.hpp:
        "@boost_mpl//:headers_only",
        # Because of boost/proto/core.hpp:
        "@boost_proto//:headers_only",
        # Because of boost/type_traits/remove_reference.hpp:
        "@boost_type_traits//:headers_only",
        # Because of boost/lexical_cast.hpp:
        "@boost_lexical_cast//:headers_only",
        # Because of boost/typeof/std/map.hpp:
        "@boost_typeof//:headers_only",
        # Because of boost/config.hpp:
        "@boost_config//:headers_only",
        # Because of boost/preprocessor/punctuation/comma_if.hpp:
        "@boost_preprocessor//:headers_only",
        # Because of boost/range/iterator_range.hpp:
        "@boost_range//:headers_only",
        # Because of boost/throw_exception.hpp:
        "@boost_throw_exception//:headers_only",
        # Because of boost/iterator/iterator_traits.hpp:
        "@boost_iterator//:headers_only",
        # Because of boost/assert.hpp:
        "@boost_assert//:headers_only",
        # Because of boost/fusion/include/cons.hpp:
        "@boost_fusion//:headers_only",
        # Because of boost/call_traits.hpp:
        "@boost_utility//:headers_only",
        # Because of boost/implicit_cast.hpp:
        "@boost_conversion//:headers_only",
        # Because of boost/exception/info.hpp:
        "@boost_exception//:headers_only",
        # Because of boost/static_assert.hpp:
        "@boost_static_assert//:headers_only",
        # Because of boost/integer.hpp:
        "@boost_integer//:headers_only",
        # Because of boost/numeric/conversion/converter.hpp:
        "@boost_numeric_conversion//:headers_only",
        # Because of boost/optional.hpp:
        "@boost_optional//:headers_only",
        # Because of boost/container/container_fwd.hpp:
        "@boost_container//:headers_only",
        # Because of boost/detail/indirect_traits.hpp:
        "@boost_detail//:headers_only",
        # Because of boost/function_types/parameter_types.hpp:
        "@boost_function_types//:headers_only",
        # Because of boost/move/utility.hpp:
        "@boost_move//:headers_only",
        # Because of boost/array.hpp:
        "@boost_array//:headers_only",
        # Because of boost/concept_check.hpp:
        "@boost_concept_check//:headers_only",
        # Because of boost/math/special_functions/fpclassify.hpp:
        "@boost_math//:headers_only",
        # Because of boost/predef.h:
        "@boost_predef//:headers_only",
    ],
)
