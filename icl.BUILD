package(default_visibility = ["//visibility:public"])

cc_library(
    name = "headers_only",
    hdrs = [
        "include/boost/icl/associative_element_container.hpp",
        "include/boost/icl/associative_interval_container.hpp",
        "include/boost/icl/closed_interval.hpp",
        "include/boost/icl/concept/comparable.hpp",
        "include/boost/icl/concept/container.hpp",
        "include/boost/icl/concept/element_associator.hpp",
        "include/boost/icl/concept/element_map.hpp",
        "include/boost/icl/concept/element_set.hpp",
        "include/boost/icl/concept/element_set_value.hpp",
        "include/boost/icl/concept/interval.hpp",
        "include/boost/icl/concept/interval_associator.hpp",
        "include/boost/icl/concept/interval_associator_base.hpp",
        "include/boost/icl/concept/interval_bounds.hpp",
        "include/boost/icl/concept/interval_map.hpp",
        "include/boost/icl/concept/interval_set.hpp",
        "include/boost/icl/concept/interval_set_value.hpp",
        "include/boost/icl/concept/joinable.hpp",
        "include/boost/icl/concept/map_value.hpp",
        "include/boost/icl/concept/set_value.hpp",
        "include/boost/icl/continuous_interval.hpp",
        "include/boost/icl/detail/associated_value.hpp",
        "include/boost/icl/detail/boost_config.hpp",
        "include/boost/icl/detail/concept_check.hpp",
        "include/boost/icl/detail/design_config.hpp",
        "include/boost/icl/detail/element_comparer.hpp",
        "include/boost/icl/detail/element_iterator.hpp",
        "include/boost/icl/detail/exclusive_less_than.hpp",
        "include/boost/icl/detail/interval_map_algo.hpp",
        "include/boost/icl/detail/interval_morphism.hpp",
        "include/boost/icl/detail/interval_set_algo.hpp",
        "include/boost/icl/detail/interval_subset_comparer.hpp",
        "include/boost/icl/detail/map_algo.hpp",
        "include/boost/icl/detail/mapped_reference.hpp",
        "include/boost/icl/detail/notate.hpp",
        "include/boost/icl/detail/on_absorbtion.hpp",
        "include/boost/icl/detail/relation_state.hpp",
        "include/boost/icl/detail/set_algo.hpp",
        "include/boost/icl/detail/std_set.hpp",
        "include/boost/icl/detail/subset_comparer.hpp",
        "include/boost/icl/discrete_interval.hpp",
        "include/boost/icl/dynamic_interval_traits.hpp",
        "include/boost/icl/functors.hpp",
        "include/boost/icl/gregorian.hpp",
        "include/boost/icl/impl_config.hpp",
        "include/boost/icl/interval.hpp",
        "include/boost/icl/interval_base_map.hpp",
        "include/boost/icl/interval_base_set.hpp",
        "include/boost/icl/interval_bounds.hpp",
        "include/boost/icl/interval_combining_style.hpp",
        "include/boost/icl/interval_map.hpp",
        "include/boost/icl/interval_set.hpp",
        "include/boost/icl/interval_traits.hpp",
        "include/boost/icl/iterator.hpp",
        "include/boost/icl/left_open_interval.hpp",
        "include/boost/icl/map.hpp",
        "include/boost/icl/open_interval.hpp",
        "include/boost/icl/predicates/distinct_equal.hpp",
        "include/boost/icl/predicates/element_equal.hpp",
        "include/boost/icl/predicates/std_equal.hpp",
        "include/boost/icl/predicates/sub_super_set.hpp",
        "include/boost/icl/ptime.hpp",
        "include/boost/icl/rational.hpp",
        "include/boost/icl/right_open_interval.hpp",
        "include/boost/icl/separate_interval_set.hpp",
        "include/boost/icl/set.hpp",
        "include/boost/icl/split_interval_map.hpp",
        "include/boost/icl/split_interval_set.hpp",
        "include/boost/icl/type_traits/absorbs_identities.hpp",
        "include/boost/icl/type_traits/adds_inversely.hpp",
        "include/boost/icl/type_traits/codomain_type_of.hpp",
        "include/boost/icl/type_traits/difference.hpp",
        "include/boost/icl/type_traits/difference_type_of.hpp",
        "include/boost/icl/type_traits/domain_type_of.hpp",
        "include/boost/icl/type_traits/element_type_of.hpp",
        "include/boost/icl/type_traits/has_inverse.hpp",
        "include/boost/icl/type_traits/has_set_semantics.hpp",
        "include/boost/icl/type_traits/identity_element.hpp",
        "include/boost/icl/type_traits/infinity.hpp",
        "include/boost/icl/type_traits/interval_type_default.hpp",
        "include/boost/icl/type_traits/interval_type_of.hpp",
        "include/boost/icl/type_traits/is_associative_element_container.hpp",
        "include/boost/icl/type_traits/is_asymmetric_interval.hpp",
        "include/boost/icl/type_traits/is_combinable.hpp",
        "include/boost/icl/type_traits/is_concept_equivalent.hpp",
        "include/boost/icl/type_traits/is_container.hpp",
        "include/boost/icl/type_traits/is_continuous.hpp",
        "include/boost/icl/type_traits/is_continuous_interval.hpp",
        "include/boost/icl/type_traits/is_discrete.hpp",
        "include/boost/icl/type_traits/is_discrete_interval.hpp",
        "include/boost/icl/type_traits/is_element_container.hpp",
        "include/boost/icl/type_traits/is_icl_container.hpp",
        "include/boost/icl/type_traits/is_increasing.hpp",
        "include/boost/icl/type_traits/is_interval.hpp",
        "include/boost/icl/type_traits/is_interval_container.hpp",
        "include/boost/icl/type_traits/is_interval_joiner.hpp",
        "include/boost/icl/type_traits/is_interval_separator.hpp",
        "include/boost/icl/type_traits/is_interval_splitter.hpp",
        "include/boost/icl/type_traits/is_key_container_of.hpp",
        "include/boost/icl/type_traits/is_map.hpp",
        "include/boost/icl/type_traits/is_numeric.hpp",
        "include/boost/icl/type_traits/is_set.hpp",
        "include/boost/icl/type_traits/is_total.hpp",
        "include/boost/icl/type_traits/no_type.hpp",
        "include/boost/icl/type_traits/predicate.hpp",
        "include/boost/icl/type_traits/rep_type_of.hpp",
        "include/boost/icl/type_traits/segment_type_of.hpp",
        "include/boost/icl/type_traits/size.hpp",
        "include/boost/icl/type_traits/size_type_of.hpp",
        "include/boost/icl/type_traits/succ_pred.hpp",
        "include/boost/icl/type_traits/to_string.hpp",
        "include/boost/icl/type_traits/type_to_string.hpp",
        "include/boost/icl/type_traits/unit_element.hpp",
        "include/boost/icl/type_traits/value_size.hpp",
    ],
    includes = [
        "include",
    ],
)

cc_library(
    name = "icl",
    srcs = [],
    hdrs = [
        "include/boost/icl/associative_element_container.hpp",
        "include/boost/icl/associative_interval_container.hpp",
        "include/boost/icl/closed_interval.hpp",
        "include/boost/icl/concept/comparable.hpp",
        "include/boost/icl/concept/container.hpp",
        "include/boost/icl/concept/element_associator.hpp",
        "include/boost/icl/concept/element_map.hpp",
        "include/boost/icl/concept/element_set.hpp",
        "include/boost/icl/concept/element_set_value.hpp",
        "include/boost/icl/concept/interval.hpp",
        "include/boost/icl/concept/interval_associator.hpp",
        "include/boost/icl/concept/interval_associator_base.hpp",
        "include/boost/icl/concept/interval_bounds.hpp",
        "include/boost/icl/concept/interval_map.hpp",
        "include/boost/icl/concept/interval_set.hpp",
        "include/boost/icl/concept/interval_set_value.hpp",
        "include/boost/icl/concept/joinable.hpp",
        "include/boost/icl/concept/map_value.hpp",
        "include/boost/icl/concept/set_value.hpp",
        "include/boost/icl/continuous_interval.hpp",
        "include/boost/icl/detail/associated_value.hpp",
        "include/boost/icl/detail/boost_config.hpp",
        "include/boost/icl/detail/concept_check.hpp",
        "include/boost/icl/detail/design_config.hpp",
        "include/boost/icl/detail/element_comparer.hpp",
        "include/boost/icl/detail/element_iterator.hpp",
        "include/boost/icl/detail/exclusive_less_than.hpp",
        "include/boost/icl/detail/interval_map_algo.hpp",
        "include/boost/icl/detail/interval_morphism.hpp",
        "include/boost/icl/detail/interval_set_algo.hpp",
        "include/boost/icl/detail/interval_subset_comparer.hpp",
        "include/boost/icl/detail/map_algo.hpp",
        "include/boost/icl/detail/mapped_reference.hpp",
        "include/boost/icl/detail/notate.hpp",
        "include/boost/icl/detail/on_absorbtion.hpp",
        "include/boost/icl/detail/relation_state.hpp",
        "include/boost/icl/detail/set_algo.hpp",
        "include/boost/icl/detail/std_set.hpp",
        "include/boost/icl/detail/subset_comparer.hpp",
        "include/boost/icl/discrete_interval.hpp",
        "include/boost/icl/dynamic_interval_traits.hpp",
        "include/boost/icl/functors.hpp",
        "include/boost/icl/gregorian.hpp",
        "include/boost/icl/impl_config.hpp",
        "include/boost/icl/interval.hpp",
        "include/boost/icl/interval_base_map.hpp",
        "include/boost/icl/interval_base_set.hpp",
        "include/boost/icl/interval_bounds.hpp",
        "include/boost/icl/interval_combining_style.hpp",
        "include/boost/icl/interval_map.hpp",
        "include/boost/icl/interval_set.hpp",
        "include/boost/icl/interval_traits.hpp",
        "include/boost/icl/iterator.hpp",
        "include/boost/icl/left_open_interval.hpp",
        "include/boost/icl/map.hpp",
        "include/boost/icl/open_interval.hpp",
        "include/boost/icl/predicates/distinct_equal.hpp",
        "include/boost/icl/predicates/element_equal.hpp",
        "include/boost/icl/predicates/std_equal.hpp",
        "include/boost/icl/predicates/sub_super_set.hpp",
        "include/boost/icl/ptime.hpp",
        "include/boost/icl/rational.hpp",
        "include/boost/icl/right_open_interval.hpp",
        "include/boost/icl/separate_interval_set.hpp",
        "include/boost/icl/set.hpp",
        "include/boost/icl/split_interval_map.hpp",
        "include/boost/icl/split_interval_set.hpp",
        "include/boost/icl/type_traits/absorbs_identities.hpp",
        "include/boost/icl/type_traits/adds_inversely.hpp",
        "include/boost/icl/type_traits/codomain_type_of.hpp",
        "include/boost/icl/type_traits/difference.hpp",
        "include/boost/icl/type_traits/difference_type_of.hpp",
        "include/boost/icl/type_traits/domain_type_of.hpp",
        "include/boost/icl/type_traits/element_type_of.hpp",
        "include/boost/icl/type_traits/has_inverse.hpp",
        "include/boost/icl/type_traits/has_set_semantics.hpp",
        "include/boost/icl/type_traits/identity_element.hpp",
        "include/boost/icl/type_traits/infinity.hpp",
        "include/boost/icl/type_traits/interval_type_default.hpp",
        "include/boost/icl/type_traits/interval_type_of.hpp",
        "include/boost/icl/type_traits/is_associative_element_container.hpp",
        "include/boost/icl/type_traits/is_asymmetric_interval.hpp",
        "include/boost/icl/type_traits/is_combinable.hpp",
        "include/boost/icl/type_traits/is_concept_equivalent.hpp",
        "include/boost/icl/type_traits/is_container.hpp",
        "include/boost/icl/type_traits/is_continuous.hpp",
        "include/boost/icl/type_traits/is_continuous_interval.hpp",
        "include/boost/icl/type_traits/is_discrete.hpp",
        "include/boost/icl/type_traits/is_discrete_interval.hpp",
        "include/boost/icl/type_traits/is_element_container.hpp",
        "include/boost/icl/type_traits/is_icl_container.hpp",
        "include/boost/icl/type_traits/is_increasing.hpp",
        "include/boost/icl/type_traits/is_interval.hpp",
        "include/boost/icl/type_traits/is_interval_container.hpp",
        "include/boost/icl/type_traits/is_interval_joiner.hpp",
        "include/boost/icl/type_traits/is_interval_separator.hpp",
        "include/boost/icl/type_traits/is_interval_splitter.hpp",
        "include/boost/icl/type_traits/is_key_container_of.hpp",
        "include/boost/icl/type_traits/is_map.hpp",
        "include/boost/icl/type_traits/is_numeric.hpp",
        "include/boost/icl/type_traits/is_set.hpp",
        "include/boost/icl/type_traits/is_total.hpp",
        "include/boost/icl/type_traits/no_type.hpp",
        "include/boost/icl/type_traits/predicate.hpp",
        "include/boost/icl/type_traits/rep_type_of.hpp",
        "include/boost/icl/type_traits/segment_type_of.hpp",
        "include/boost/icl/type_traits/size.hpp",
        "include/boost/icl/type_traits/size_type_of.hpp",
        "include/boost/icl/type_traits/succ_pred.hpp",
        "include/boost/icl/type_traits/to_string.hpp",
        "include/boost/icl/type_traits/type_to_string.hpp",
        "include/boost/icl/type_traits/unit_element.hpp",
        "include/boost/icl/type_traits/value_size.hpp",
    ],
    copts = [],
    deps = [
        ":headers_only",
        # Because of boost/mpl/not.hpp:
        "@boost_mpl//:headers_only",
        # Because of boost/utility/enable_if.hpp:
        "@boost_core//:headers_only",
        # Because of boost/config.hpp:
        "@boost_config//:headers_only",
        # Because of boost/type_traits/is_const.hpp:
        "@boost_type_traits//:headers_only",
        # Because of boost/assert.hpp:
        "@boost_assert//:headers_only",
        # Because of boost/concept/assert.hpp:
        "@boost_concept_check//:headers_only",
        # Because of boost/static_assert.hpp:
        "@boost_static_assert//:headers_only",
        # Because of boost/container/set.hpp:
        "@boost_container//:headers_only",
        # Because of boost/next_prior.hpp:
        "@boost_iterator//:headers_only",
        # Because of boost/rational.hpp:
        "@boost_rational//:headers_only",
        # Because of boost/date_time/posix_time/posix_time.hpp:
        "@boost_date_time//:headers_only",
        # Because of boost/detail/is_incrementable.hpp:
        "@boost_detail//:headers_only",
        # Because of boost/move/move.hpp:
        "@boost_move//:headers_only",
        # Because of boost/range/iterator_range.hpp:
        "@boost_range//:headers_only",
        # Because of boost/call_traits.hpp:
        "@boost_utility//:headers_only",
        # Because of boost/preprocessor/cat.hpp:
        "@boost_preprocessor//:headers_only",
        # Because of boost/intrusive/detail/minimal_pair_header.hpp:
        "@boost_intrusive//:headers_only",
        # Because of boost/throw_exception.hpp:
        "@boost_throw_exception//:headers_only",
        # Because of boost/integer/common_factor_rt.hpp:
        "@boost_integer//:headers_only",
        # Because of boost/io/ios_state.hpp:
        "@boost_io//:headers_only",
        # Because of boost/numeric/conversion/cast.hpp:
        "@boost_numeric_conversion//:headers_only",
        # Because of boost/tokenizer.hpp:
        "@boost_tokenizer//:headers_only",
        # Because of boost/lexical_cast.hpp:
        "@boost_lexical_cast//:headers_only",
        # Because of boost/algorithm/string/replace.hpp:
        "@boost_algorithm//:headers_only",
        # Because of boost/shared_ptr.hpp:
        "@boost_smart_ptr//:headers_only",
        # Because of boost/array.hpp:
        "@boost_array//:headers_only",
        # Because of boost/math/special_functions/fpclassify.hpp:
        "@boost_math//:headers_only",
        # Because of boost/detail/endian.hpp:
        "@boost_predef//:headers_only",
    ],
)
