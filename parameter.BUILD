package(default_visibility = ["//visibility:public"])

cc_library(
    name = "headers_only",
    hdrs = [
        "include/boost/parameter.hpp",
        "include/boost/parameter/are_tagged_arguments.hpp",
        "include/boost/parameter/aux_/always_true_predicate.hpp",
        "include/boost/parameter/aux_/arg_list.hpp",
        "include/boost/parameter/aux_/as_lvalue.hpp",
        "include/boost/parameter/aux_/augment_predicate.hpp",
        "include/boost/parameter/aux_/cast.hpp",
        "include/boost/parameter/aux_/default.hpp",
        "include/boost/parameter/aux_/has_nested_template_fn.hpp",
        "include/boost/parameter/aux_/is_maybe.hpp",
        "include/boost/parameter/aux_/is_placeholder.hpp",
        "include/boost/parameter/aux_/is_tagged_argument.hpp",
        "include/boost/parameter/aux_/lambda_tag.hpp",
        "include/boost/parameter/aux_/maybe.hpp",
        "include/boost/parameter/aux_/name.hpp",
        "include/boost/parameter/aux_/pack/as_parameter_requirements.hpp",
        "include/boost/parameter/aux_/pack/deduce_tag.hpp",
        "include/boost/parameter/aux_/pack/deduced_item.hpp",
        "include/boost/parameter/aux_/pack/insert_tagged.hpp",
        "include/boost/parameter/aux_/pack/is_named_argument.hpp",
        "include/boost/parameter/aux_/pack/item.hpp",
        "include/boost/parameter/aux_/pack/make_arg_list.hpp",
        "include/boost/parameter/aux_/pack/make_deduced_items.hpp",
        "include/boost/parameter/aux_/pack/make_items.hpp",
        "include/boost/parameter/aux_/pack/make_parameter_spec_items.hpp",
        "include/boost/parameter/aux_/pack/parameter_requirements.hpp",
        "include/boost/parameter/aux_/pack/predicate.hpp",
        "include/boost/parameter/aux_/pack/satisfies.hpp",
        "include/boost/parameter/aux_/pack/tag_deduced.hpp",
        "include/boost/parameter/aux_/pack/tag_keyword_arg.hpp",
        "include/boost/parameter/aux_/pack/tag_keyword_arg_ref.hpp",
        "include/boost/parameter/aux_/pack/tag_template_keyword_arg.hpp",
        "include/boost/parameter/aux_/pack/tag_type.hpp",
        "include/boost/parameter/aux_/pack/unmatched_argument.hpp",
        "include/boost/parameter/aux_/parameter_requirements.hpp",
        "include/boost/parameter/aux_/parenthesized_type.hpp",
        "include/boost/parameter/aux_/pp_impl/argument_pack.hpp",
        "include/boost/parameter/aux_/pp_impl/match.hpp",
        "include/boost/parameter/aux_/pp_impl/unwrap_predicate.hpp",
        "include/boost/parameter/aux_/preprocessor/binary_seq_for_each.hpp",
        "include/boost/parameter/aux_/preprocessor/binary_seq_for_each_inc.hpp",
        "include/boost/parameter/aux_/preprocessor/binary_seq_to_args.hpp",
        "include/boost/parameter/aux_/preprocessor/convert_binary_seq.hpp",
        "include/boost/parameter/aux_/preprocessor/flatten.hpp",
        "include/boost/parameter/aux_/preprocessor/for_each.hpp",
        "include/boost/parameter/aux_/preprocessor/for_each_pred.hpp",
        "include/boost/parameter/aux_/preprocessor/impl/argument_specs.hpp",
        "include/boost/parameter/aux_/preprocessor/impl/arity_range.hpp",
        "include/boost/parameter/aux_/preprocessor/impl/flatten.hpp",
        "include/boost/parameter/aux_/preprocessor/impl/for_each.hpp",
        "include/boost/parameter/aux_/preprocessor/impl/forwarding_overloads.hpp",
        "include/boost/parameter/aux_/preprocessor/impl/function_cast.hpp",
        "include/boost/parameter/aux_/preprocessor/impl/function_dispatch_layer.hpp",
        "include/boost/parameter/aux_/preprocessor/impl/function_dispatch_tuple.hpp",
        "include/boost/parameter/aux_/preprocessor/impl/function_forward_match.hpp",
        "include/boost/parameter/aux_/preprocessor/impl/function_name.hpp",
        "include/boost/parameter/aux_/preprocessor/impl/no_spec_overloads.hpp",
        "include/boost/parameter/aux_/preprocessor/impl/parenthesized_return_type.hpp",
        "include/boost/parameter/aux_/preprocessor/impl/parenthesized_type.hpp",
        "include/boost/parameter/aux_/preprocessor/impl/specification.hpp",
        "include/boost/parameter/aux_/preprocessor/impl/split_args.hpp",
        "include/boost/parameter/aux_/preprocessor/inc_binary_seq.hpp",
        "include/boost/parameter/aux_/preprocessor/is_binary.hpp",
        "include/boost/parameter/aux_/preprocessor/is_nullary.hpp",
        "include/boost/parameter/aux_/preprocessor/no_perfect_forwarding_begin.hpp",
        "include/boost/parameter/aux_/preprocessor/no_perfect_forwarding_end.hpp",
        "include/boost/parameter/aux_/preprocessor/nullptr.hpp",
        "include/boost/parameter/aux_/preprocessor/overloads.hpp",
        "include/boost/parameter/aux_/preprocessor/qualifier.hpp",
        "include/boost/parameter/aux_/preprocessor/seq_enum.hpp",
        "include/boost/parameter/aux_/preprocessor/seq_merge.hpp",
        "include/boost/parameter/aux_/result_of0.hpp",
        "include/boost/parameter/aux_/set.hpp",
        "include/boost/parameter/aux_/tag.hpp",
        "include/boost/parameter/aux_/tagged_argument.hpp",
        "include/boost/parameter/aux_/tagged_argument_fwd.hpp",
        "include/boost/parameter/aux_/template_keyword.hpp",
        "include/boost/parameter/aux_/unwrap_cv_reference.hpp",
        "include/boost/parameter/aux_/use_default.hpp",
        "include/boost/parameter/aux_/use_default_tag.hpp",
        "include/boost/parameter/aux_/void.hpp",
        "include/boost/parameter/aux_/yesno.hpp",
        "include/boost/parameter/binding.hpp",
        "include/boost/parameter/compose.hpp",
        "include/boost/parameter/config.hpp",
        "include/boost/parameter/deduced.hpp",
        "include/boost/parameter/is_argument_pack.hpp",
        "include/boost/parameter/keyword.hpp",
        "include/boost/parameter/keyword_fwd.hpp",
        "include/boost/parameter/macros.hpp",
        "include/boost/parameter/match.hpp",
        "include/boost/parameter/name.hpp",
        "include/boost/parameter/nested_keyword.hpp",
        "include/boost/parameter/optional.hpp",
        "include/boost/parameter/parameters.hpp",
        "include/boost/parameter/preprocessor.hpp",
        "include/boost/parameter/preprocessor_no_spec.hpp",
        "include/boost/parameter/required.hpp",
        "include/boost/parameter/template_keyword.hpp",
        "include/boost/parameter/value_type.hpp",
    ],
    includes = [
        "include",
    ],
)

cc_library(
    name = "parameter",
    srcs = [],
    hdrs = [
        "include/boost/parameter.hpp",
        "include/boost/parameter/are_tagged_arguments.hpp",
        "include/boost/parameter/aux_/always_true_predicate.hpp",
        "include/boost/parameter/aux_/arg_list.hpp",
        "include/boost/parameter/aux_/as_lvalue.hpp",
        "include/boost/parameter/aux_/augment_predicate.hpp",
        "include/boost/parameter/aux_/cast.hpp",
        "include/boost/parameter/aux_/default.hpp",
        "include/boost/parameter/aux_/has_nested_template_fn.hpp",
        "include/boost/parameter/aux_/is_maybe.hpp",
        "include/boost/parameter/aux_/is_placeholder.hpp",
        "include/boost/parameter/aux_/is_tagged_argument.hpp",
        "include/boost/parameter/aux_/lambda_tag.hpp",
        "include/boost/parameter/aux_/maybe.hpp",
        "include/boost/parameter/aux_/name.hpp",
        "include/boost/parameter/aux_/pack/as_parameter_requirements.hpp",
        "include/boost/parameter/aux_/pack/deduce_tag.hpp",
        "include/boost/parameter/aux_/pack/deduced_item.hpp",
        "include/boost/parameter/aux_/pack/insert_tagged.hpp",
        "include/boost/parameter/aux_/pack/is_named_argument.hpp",
        "include/boost/parameter/aux_/pack/item.hpp",
        "include/boost/parameter/aux_/pack/make_arg_list.hpp",
        "include/boost/parameter/aux_/pack/make_deduced_items.hpp",
        "include/boost/parameter/aux_/pack/make_items.hpp",
        "include/boost/parameter/aux_/pack/make_parameter_spec_items.hpp",
        "include/boost/parameter/aux_/pack/parameter_requirements.hpp",
        "include/boost/parameter/aux_/pack/predicate.hpp",
        "include/boost/parameter/aux_/pack/satisfies.hpp",
        "include/boost/parameter/aux_/pack/tag_deduced.hpp",
        "include/boost/parameter/aux_/pack/tag_keyword_arg.hpp",
        "include/boost/parameter/aux_/pack/tag_keyword_arg_ref.hpp",
        "include/boost/parameter/aux_/pack/tag_template_keyword_arg.hpp",
        "include/boost/parameter/aux_/pack/tag_type.hpp",
        "include/boost/parameter/aux_/pack/unmatched_argument.hpp",
        "include/boost/parameter/aux_/parameter_requirements.hpp",
        "include/boost/parameter/aux_/parenthesized_type.hpp",
        "include/boost/parameter/aux_/pp_impl/argument_pack.hpp",
        "include/boost/parameter/aux_/pp_impl/match.hpp",
        "include/boost/parameter/aux_/pp_impl/unwrap_predicate.hpp",
        "include/boost/parameter/aux_/preprocessor/binary_seq_for_each.hpp",
        "include/boost/parameter/aux_/preprocessor/binary_seq_for_each_inc.hpp",
        "include/boost/parameter/aux_/preprocessor/binary_seq_to_args.hpp",
        "include/boost/parameter/aux_/preprocessor/convert_binary_seq.hpp",
        "include/boost/parameter/aux_/preprocessor/flatten.hpp",
        "include/boost/parameter/aux_/preprocessor/for_each.hpp",
        "include/boost/parameter/aux_/preprocessor/for_each_pred.hpp",
        "include/boost/parameter/aux_/preprocessor/impl/argument_specs.hpp",
        "include/boost/parameter/aux_/preprocessor/impl/arity_range.hpp",
        "include/boost/parameter/aux_/preprocessor/impl/flatten.hpp",
        "include/boost/parameter/aux_/preprocessor/impl/for_each.hpp",
        "include/boost/parameter/aux_/preprocessor/impl/forwarding_overloads.hpp",
        "include/boost/parameter/aux_/preprocessor/impl/function_cast.hpp",
        "include/boost/parameter/aux_/preprocessor/impl/function_dispatch_layer.hpp",
        "include/boost/parameter/aux_/preprocessor/impl/function_dispatch_tuple.hpp",
        "include/boost/parameter/aux_/preprocessor/impl/function_forward_match.hpp",
        "include/boost/parameter/aux_/preprocessor/impl/function_name.hpp",
        "include/boost/parameter/aux_/preprocessor/impl/no_spec_overloads.hpp",
        "include/boost/parameter/aux_/preprocessor/impl/parenthesized_return_type.hpp",
        "include/boost/parameter/aux_/preprocessor/impl/parenthesized_type.hpp",
        "include/boost/parameter/aux_/preprocessor/impl/specification.hpp",
        "include/boost/parameter/aux_/preprocessor/impl/split_args.hpp",
        "include/boost/parameter/aux_/preprocessor/inc_binary_seq.hpp",
        "include/boost/parameter/aux_/preprocessor/is_binary.hpp",
        "include/boost/parameter/aux_/preprocessor/is_nullary.hpp",
        "include/boost/parameter/aux_/preprocessor/no_perfect_forwarding_begin.hpp",
        "include/boost/parameter/aux_/preprocessor/no_perfect_forwarding_end.hpp",
        "include/boost/parameter/aux_/preprocessor/nullptr.hpp",
        "include/boost/parameter/aux_/preprocessor/overloads.hpp",
        "include/boost/parameter/aux_/preprocessor/qualifier.hpp",
        "include/boost/parameter/aux_/preprocessor/seq_enum.hpp",
        "include/boost/parameter/aux_/preprocessor/seq_merge.hpp",
        "include/boost/parameter/aux_/result_of0.hpp",
        "include/boost/parameter/aux_/set.hpp",
        "include/boost/parameter/aux_/tag.hpp",
        "include/boost/parameter/aux_/tagged_argument.hpp",
        "include/boost/parameter/aux_/tagged_argument_fwd.hpp",
        "include/boost/parameter/aux_/template_keyword.hpp",
        "include/boost/parameter/aux_/unwrap_cv_reference.hpp",
        "include/boost/parameter/aux_/use_default.hpp",
        "include/boost/parameter/aux_/use_default_tag.hpp",
        "include/boost/parameter/aux_/void.hpp",
        "include/boost/parameter/aux_/yesno.hpp",
        "include/boost/parameter/binding.hpp",
        "include/boost/parameter/compose.hpp",
        "include/boost/parameter/config.hpp",
        "include/boost/parameter/deduced.hpp",
        "include/boost/parameter/is_argument_pack.hpp",
        "include/boost/parameter/keyword.hpp",
        "include/boost/parameter/keyword_fwd.hpp",
        "include/boost/parameter/macros.hpp",
        "include/boost/parameter/match.hpp",
        "include/boost/parameter/name.hpp",
        "include/boost/parameter/nested_keyword.hpp",
        "include/boost/parameter/optional.hpp",
        "include/boost/parameter/parameters.hpp",
        "include/boost/parameter/preprocessor.hpp",
        "include/boost/parameter/preprocessor_no_spec.hpp",
        "include/boost/parameter/required.hpp",
        "include/boost/parameter/template_keyword.hpp",
        "include/boost/parameter/value_type.hpp",
    ],
    copts = [],
    deps = [
        ":headers_only",
        # Because of boost/preprocessor/facilities/is_empty.hpp:
        "@boost_preprocessor//:headers_only",
        # Because of boost/config.hpp:
        "@boost_config//:headers_only",
        # Because of boost/mpl/limits/vector.hpp:
        "@boost_mpl//:headers_only",
        # Because of boost/mp11/integral.hpp:
        "@boost_mp11//:headers_only",
        # Because of boost/type_traits/is_same.hpp:
        "@boost_type_traits//:headers_only",
        # Because of boost/core/enable_if.hpp:
        "@boost_core//:headers_only",
        # Because of boost/optional/optional.hpp:
        "@boost_optional//:headers_only",
        # Because of boost/function.hpp:
        "@boost_function//:headers_only",
        # Because of boost/utility/result_of.hpp:
        "@boost_utility//:headers_only",
        # Because of boost/fusion/container/list/list_fwd.hpp:
        "@boost_fusion//:headers_only",
        # Because of boost/static_assert.hpp:
        "@boost_static_assert//:headers_only",
        # Because of boost/throw_exception.hpp:
        "@boost_throw_exception//:headers_only",
        # Because of boost/move/utility.hpp:
        "@boost_move//:headers_only",
        # Because of boost/assert.hpp:
        "@boost_assert//:headers_only",
        # Because of boost/detail/reference_content.hpp:
        "@boost_detail//:headers_only",
        # Because of boost/mem_fn.hpp:
        "@boost_bind//:headers_only",
        # Because of boost/type_index.hpp:
        "@boost_type_index//:headers_only",
        # Because of boost/integer.hpp:
        "@boost_integer//:headers_only",
        # Because of boost/container_hash/hash.hpp:
        "@boost_container_hash//:headers_only",
    ],
)
