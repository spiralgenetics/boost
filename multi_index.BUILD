package(default_visibility = ["//visibility:public"])

cc_library(
    name = "headers_only",
    hdrs = [
        "include/boost/multi_index/composite_key.hpp",
        "include/boost/multi_index/detail/access_specifier.hpp",
        "include/boost/multi_index/detail/adl_swap.hpp",
        "include/boost/multi_index/detail/allocator_traits.hpp",
        "include/boost/multi_index/detail/archive_constructed.hpp",
        "include/boost/multi_index/detail/auto_space.hpp",
        "include/boost/multi_index/detail/base_type.hpp",
        "include/boost/multi_index/detail/bidir_node_iterator.hpp",
        "include/boost/multi_index/detail/bucket_array.hpp",
        "include/boost/multi_index/detail/cons_stdtuple.hpp",
        "include/boost/multi_index/detail/converter.hpp",
        "include/boost/multi_index/detail/copy_map.hpp",
        "include/boost/multi_index/detail/do_not_copy_elements_tag.hpp",
        "include/boost/multi_index/detail/duplicates_iterator.hpp",
        "include/boost/multi_index/detail/has_tag.hpp",
        "include/boost/multi_index/detail/hash_index_args.hpp",
        "include/boost/multi_index/detail/hash_index_iterator.hpp",
        "include/boost/multi_index/detail/hash_index_node.hpp",
        "include/boost/multi_index/detail/header_holder.hpp",
        "include/boost/multi_index/detail/ignore_wstrict_aliasing.hpp",
        "include/boost/multi_index/detail/index_base.hpp",
        "include/boost/multi_index/detail/index_loader.hpp",
        "include/boost/multi_index/detail/index_matcher.hpp",
        "include/boost/multi_index/detail/index_node_base.hpp",
        "include/boost/multi_index/detail/index_saver.hpp",
        "include/boost/multi_index/detail/invariant_assert.hpp",
        "include/boost/multi_index/detail/is_function.hpp",
        "include/boost/multi_index/detail/is_index_list.hpp",
        "include/boost/multi_index/detail/is_transparent.hpp",
        "include/boost/multi_index/detail/iter_adaptor.hpp",
        "include/boost/multi_index/detail/modify_key_adaptor.hpp",
        "include/boost/multi_index/detail/no_duplicate_tags.hpp",
        "include/boost/multi_index/detail/node_type.hpp",
        "include/boost/multi_index/detail/ord_index_args.hpp",
        "include/boost/multi_index/detail/ord_index_impl.hpp",
        "include/boost/multi_index/detail/ord_index_impl_fwd.hpp",
        "include/boost/multi_index/detail/ord_index_node.hpp",
        "include/boost/multi_index/detail/ord_index_ops.hpp",
        "include/boost/multi_index/detail/promotes_arg.hpp",
        "include/boost/multi_index/detail/raw_ptr.hpp",
        "include/boost/multi_index/detail/restore_wstrict_aliasing.hpp",
        "include/boost/multi_index/detail/rnd_index_loader.hpp",
        "include/boost/multi_index/detail/rnd_index_node.hpp",
        "include/boost/multi_index/detail/rnd_index_ops.hpp",
        "include/boost/multi_index/detail/rnd_index_ptr_array.hpp",
        "include/boost/multi_index/detail/rnd_node_iterator.hpp",
        "include/boost/multi_index/detail/rnk_index_ops.hpp",
        "include/boost/multi_index/detail/safe_mode.hpp",
        "include/boost/multi_index/detail/scope_guard.hpp",
        "include/boost/multi_index/detail/seq_index_node.hpp",
        "include/boost/multi_index/detail/seq_index_ops.hpp",
        "include/boost/multi_index/detail/serialization_version.hpp",
        "include/boost/multi_index/detail/uintptr_type.hpp",
        "include/boost/multi_index/detail/unbounded.hpp",
        "include/boost/multi_index/detail/value_compare.hpp",
        "include/boost/multi_index/detail/vartempl_support.hpp",
        "include/boost/multi_index/global_fun.hpp",
        "include/boost/multi_index/hashed_index.hpp",
        "include/boost/multi_index/hashed_index_fwd.hpp",
        "include/boost/multi_index/identity.hpp",
        "include/boost/multi_index/identity_fwd.hpp",
        "include/boost/multi_index/indexed_by.hpp",
        "include/boost/multi_index/key.hpp",
        "include/boost/multi_index/key_extractors.hpp",
        "include/boost/multi_index/mem_fun.hpp",
        "include/boost/multi_index/member.hpp",
        "include/boost/multi_index/ordered_index.hpp",
        "include/boost/multi_index/ordered_index_fwd.hpp",
        "include/boost/multi_index/random_access_index.hpp",
        "include/boost/multi_index/random_access_index_fwd.hpp",
        "include/boost/multi_index/ranked_index.hpp",
        "include/boost/multi_index/ranked_index_fwd.hpp",
        "include/boost/multi_index/safe_mode_errors.hpp",
        "include/boost/multi_index/sequenced_index.hpp",
        "include/boost/multi_index/sequenced_index_fwd.hpp",
        "include/boost/multi_index/tag.hpp",
        "include/boost/multi_index_container.hpp",
        "include/boost/multi_index_container_fwd.hpp",
    ],
    includes = [
        "include",
    ],
)

cc_library(
    name = "multi_index",
    srcs = [],
    hdrs = [
        "include/boost/multi_index/composite_key.hpp",
        "include/boost/multi_index/detail/access_specifier.hpp",
        "include/boost/multi_index/detail/adl_swap.hpp",
        "include/boost/multi_index/detail/allocator_traits.hpp",
        "include/boost/multi_index/detail/archive_constructed.hpp",
        "include/boost/multi_index/detail/auto_space.hpp",
        "include/boost/multi_index/detail/base_type.hpp",
        "include/boost/multi_index/detail/bidir_node_iterator.hpp",
        "include/boost/multi_index/detail/bucket_array.hpp",
        "include/boost/multi_index/detail/cons_stdtuple.hpp",
        "include/boost/multi_index/detail/converter.hpp",
        "include/boost/multi_index/detail/copy_map.hpp",
        "include/boost/multi_index/detail/do_not_copy_elements_tag.hpp",
        "include/boost/multi_index/detail/duplicates_iterator.hpp",
        "include/boost/multi_index/detail/has_tag.hpp",
        "include/boost/multi_index/detail/hash_index_args.hpp",
        "include/boost/multi_index/detail/hash_index_iterator.hpp",
        "include/boost/multi_index/detail/hash_index_node.hpp",
        "include/boost/multi_index/detail/header_holder.hpp",
        "include/boost/multi_index/detail/ignore_wstrict_aliasing.hpp",
        "include/boost/multi_index/detail/index_base.hpp",
        "include/boost/multi_index/detail/index_loader.hpp",
        "include/boost/multi_index/detail/index_matcher.hpp",
        "include/boost/multi_index/detail/index_node_base.hpp",
        "include/boost/multi_index/detail/index_saver.hpp",
        "include/boost/multi_index/detail/invariant_assert.hpp",
        "include/boost/multi_index/detail/is_function.hpp",
        "include/boost/multi_index/detail/is_index_list.hpp",
        "include/boost/multi_index/detail/is_transparent.hpp",
        "include/boost/multi_index/detail/iter_adaptor.hpp",
        "include/boost/multi_index/detail/modify_key_adaptor.hpp",
        "include/boost/multi_index/detail/no_duplicate_tags.hpp",
        "include/boost/multi_index/detail/node_type.hpp",
        "include/boost/multi_index/detail/ord_index_args.hpp",
        "include/boost/multi_index/detail/ord_index_impl.hpp",
        "include/boost/multi_index/detail/ord_index_impl_fwd.hpp",
        "include/boost/multi_index/detail/ord_index_node.hpp",
        "include/boost/multi_index/detail/ord_index_ops.hpp",
        "include/boost/multi_index/detail/promotes_arg.hpp",
        "include/boost/multi_index/detail/raw_ptr.hpp",
        "include/boost/multi_index/detail/restore_wstrict_aliasing.hpp",
        "include/boost/multi_index/detail/rnd_index_loader.hpp",
        "include/boost/multi_index/detail/rnd_index_node.hpp",
        "include/boost/multi_index/detail/rnd_index_ops.hpp",
        "include/boost/multi_index/detail/rnd_index_ptr_array.hpp",
        "include/boost/multi_index/detail/rnd_node_iterator.hpp",
        "include/boost/multi_index/detail/rnk_index_ops.hpp",
        "include/boost/multi_index/detail/safe_mode.hpp",
        "include/boost/multi_index/detail/scope_guard.hpp",
        "include/boost/multi_index/detail/seq_index_node.hpp",
        "include/boost/multi_index/detail/seq_index_ops.hpp",
        "include/boost/multi_index/detail/serialization_version.hpp",
        "include/boost/multi_index/detail/uintptr_type.hpp",
        "include/boost/multi_index/detail/unbounded.hpp",
        "include/boost/multi_index/detail/value_compare.hpp",
        "include/boost/multi_index/detail/vartempl_support.hpp",
        "include/boost/multi_index/global_fun.hpp",
        "include/boost/multi_index/hashed_index.hpp",
        "include/boost/multi_index/hashed_index_fwd.hpp",
        "include/boost/multi_index/identity.hpp",
        "include/boost/multi_index/identity_fwd.hpp",
        "include/boost/multi_index/indexed_by.hpp",
        "include/boost/multi_index/key.hpp",
        "include/boost/multi_index/key_extractors.hpp",
        "include/boost/multi_index/mem_fun.hpp",
        "include/boost/multi_index/member.hpp",
        "include/boost/multi_index/ordered_index.hpp",
        "include/boost/multi_index/ordered_index_fwd.hpp",
        "include/boost/multi_index/random_access_index.hpp",
        "include/boost/multi_index/random_access_index_fwd.hpp",
        "include/boost/multi_index/ranked_index.hpp",
        "include/boost/multi_index/ranked_index_fwd.hpp",
        "include/boost/multi_index/safe_mode_errors.hpp",
        "include/boost/multi_index/sequenced_index.hpp",
        "include/boost/multi_index/sequenced_index_fwd.hpp",
        "include/boost/multi_index/tag.hpp",
        "include/boost/multi_index_container.hpp",
        "include/boost/multi_index_container_fwd.hpp",
    ],
    copts = [],
    deps = [
        ":headers_only",
        # Because of boost/serialization/nvp.hpp:
        "@boost_serialization//:headers_only",
        # Because of boost/config.hpp:
        "@boost_config//:headers_only",
        # Because of boost/noncopyable.hpp:
        "@boost_core//:headers_only",
        # Because of boost/move/core.hpp:
        "@boost_move//:headers_only",
        # Because of boost/tuple/tuple.hpp:
        "@boost_tuple//:headers_only",
        # Because of boost/mpl/not.hpp:
        "@boost_mpl//:headers_only",
        # Because of boost/call_traits.hpp:
        "@boost_utility//:headers_only",
        # Because of boost/foreach_fwd.hpp:
        "@boost_foreach//:headers_only",
        # Because of boost/type_traits/is_integral.hpp:
        "@boost_type_traits//:headers_only",
        # Because of boost/throw_exception.hpp:
        "@boost_throw_exception//:headers_only",
        # Because of boost/bind.hpp:
        "@boost_bind//:headers_only",
        # Because of boost/iterator/reverse_iterator.hpp:
        "@boost_iterator//:headers_only",
        # Because of boost/functional/hash.hpp:
        "@boost_container_hash//:headers_only",
        # Because of boost/static_assert.hpp:
        "@boost_static_assert//:headers_only",
        # Because of boost/integer/common_factor_rt.hpp:
        "@boost_integer//:headers_only",
        # Because of boost/preprocessor/seq/elem.hpp:
        "@boost_preprocessor//:headers_only",
        # Because of boost/assert.hpp:
        "@boost_assert//:headers_only",
        # Because of boost/detail/lightweight_mutex.hpp:
        "@boost_smart_ptr//:headers_only",
        # Because of boost/detail/container_fwd.hpp:
        "@boost_detail//:headers_only",
        # Because of boost/predef.h:
        "@boost_predef//:headers_only",
    ],
)
