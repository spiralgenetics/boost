package(default_visibility = ["//visibility:public"])

cc_library(
    name = "headers_only",
    hdrs = [
        "include/boost/intrusive/any_hook.hpp",
        "include/boost/intrusive/avl_set.hpp",
        "include/boost/intrusive/avl_set_hook.hpp",
        "include/boost/intrusive/avltree.hpp",
        "include/boost/intrusive/avltree_algorithms.hpp",
        "include/boost/intrusive/bs_set.hpp",
        "include/boost/intrusive/bs_set_hook.hpp",
        "include/boost/intrusive/bstree.hpp",
        "include/boost/intrusive/bstree_algorithms.hpp",
        "include/boost/intrusive/circular_list_algorithms.hpp",
        "include/boost/intrusive/circular_slist_algorithms.hpp",
        "include/boost/intrusive/derivation_value_traits.hpp",
        "include/boost/intrusive/detail/algo_type.hpp",
        "include/boost/intrusive/detail/algorithm.hpp",
        "include/boost/intrusive/detail/any_node_and_algorithms.hpp",
        "include/boost/intrusive/detail/array_initializer.hpp",
        "include/boost/intrusive/detail/assert.hpp",
        "include/boost/intrusive/detail/avltree_node.hpp",
        "include/boost/intrusive/detail/bstree_algorithms_base.hpp",
        "include/boost/intrusive/detail/common_slist_algorithms.hpp",
        "include/boost/intrusive/detail/config_begin.hpp",
        "include/boost/intrusive/detail/config_end.hpp",
        "include/boost/intrusive/detail/default_header_holder.hpp",
        "include/boost/intrusive/detail/ebo_functor_holder.hpp",
        "include/boost/intrusive/detail/empty_node_checker.hpp",
        "include/boost/intrusive/detail/equal_to_value.hpp",
        "include/boost/intrusive/detail/exception_disposer.hpp",
        "include/boost/intrusive/detail/function_detector.hpp",
        "include/boost/intrusive/detail/generic_hook.hpp",
        "include/boost/intrusive/detail/get_value_traits.hpp",
        "include/boost/intrusive/detail/has_member_function_callable_with.hpp",
        "include/boost/intrusive/detail/hashtable_node.hpp",
        "include/boost/intrusive/detail/hook_traits.hpp",
        "include/boost/intrusive/detail/iiterator.hpp",
        "include/boost/intrusive/detail/is_stateful_value_traits.hpp",
        "include/boost/intrusive/detail/iterator.hpp",
        "include/boost/intrusive/detail/key_nodeptr_comp.hpp",
        "include/boost/intrusive/detail/list_iterator.hpp",
        "include/boost/intrusive/detail/list_node.hpp",
        "include/boost/intrusive/detail/math.hpp",
        "include/boost/intrusive/detail/minimal_less_equal_header.hpp",
        "include/boost/intrusive/detail/minimal_pair_header.hpp",
        "include/boost/intrusive/detail/mpl.hpp",
        "include/boost/intrusive/detail/node_cloner_disposer.hpp",
        "include/boost/intrusive/detail/node_holder.hpp",
        "include/boost/intrusive/detail/node_to_value.hpp",
        "include/boost/intrusive/detail/parent_from_member.hpp",
        "include/boost/intrusive/detail/pointer_element.hpp",
        "include/boost/intrusive/detail/rbtree_node.hpp",
        "include/boost/intrusive/detail/reverse_iterator.hpp",
        "include/boost/intrusive/detail/simple_disposers.hpp",
        "include/boost/intrusive/detail/size_holder.hpp",
        "include/boost/intrusive/detail/slist_iterator.hpp",
        "include/boost/intrusive/detail/slist_node.hpp",
        "include/boost/intrusive/detail/std_fwd.hpp",
        "include/boost/intrusive/detail/to_raw_pointer.hpp",
        "include/boost/intrusive/detail/transform_iterator.hpp",
        "include/boost/intrusive/detail/tree_iterator.hpp",
        "include/boost/intrusive/detail/tree_node.hpp",
        "include/boost/intrusive/detail/uncast.hpp",
        "include/boost/intrusive/detail/workaround.hpp",
        "include/boost/intrusive/hashtable.hpp",
        "include/boost/intrusive/intrusive_fwd.hpp",
        "include/boost/intrusive/linear_slist_algorithms.hpp",
        "include/boost/intrusive/link_mode.hpp",
        "include/boost/intrusive/list.hpp",
        "include/boost/intrusive/list_hook.hpp",
        "include/boost/intrusive/member_value_traits.hpp",
        "include/boost/intrusive/options.hpp",
        "include/boost/intrusive/pack_options.hpp",
        "include/boost/intrusive/parent_from_member.hpp",
        "include/boost/intrusive/pointer_plus_bits.hpp",
        "include/boost/intrusive/pointer_rebind.hpp",
        "include/boost/intrusive/pointer_traits.hpp",
        "include/boost/intrusive/priority_compare.hpp",
        "include/boost/intrusive/rbtree.hpp",
        "include/boost/intrusive/rbtree_algorithms.hpp",
        "include/boost/intrusive/set.hpp",
        "include/boost/intrusive/set_hook.hpp",
        "include/boost/intrusive/sg_set.hpp",
        "include/boost/intrusive/sgtree.hpp",
        "include/boost/intrusive/sgtree_algorithms.hpp",
        "include/boost/intrusive/slist.hpp",
        "include/boost/intrusive/slist_hook.hpp",
        "include/boost/intrusive/splay_set.hpp",
        "include/boost/intrusive/splaytree.hpp",
        "include/boost/intrusive/splaytree_algorithms.hpp",
        "include/boost/intrusive/treap.hpp",
        "include/boost/intrusive/treap_algorithms.hpp",
        "include/boost/intrusive/treap_set.hpp",
        "include/boost/intrusive/trivial_value_traits.hpp",
        "include/boost/intrusive/unordered_set.hpp",
        "include/boost/intrusive/unordered_set_hook.hpp",
    ],
    includes = [
        "include",
    ],
)

cc_library(
    name = "intrusive",
    srcs = [],
    hdrs = [
        "include/boost/intrusive/any_hook.hpp",
        "include/boost/intrusive/avl_set.hpp",
        "include/boost/intrusive/avl_set_hook.hpp",
        "include/boost/intrusive/avltree.hpp",
        "include/boost/intrusive/avltree_algorithms.hpp",
        "include/boost/intrusive/bs_set.hpp",
        "include/boost/intrusive/bs_set_hook.hpp",
        "include/boost/intrusive/bstree.hpp",
        "include/boost/intrusive/bstree_algorithms.hpp",
        "include/boost/intrusive/circular_list_algorithms.hpp",
        "include/boost/intrusive/circular_slist_algorithms.hpp",
        "include/boost/intrusive/derivation_value_traits.hpp",
        "include/boost/intrusive/detail/algo_type.hpp",
        "include/boost/intrusive/detail/algorithm.hpp",
        "include/boost/intrusive/detail/any_node_and_algorithms.hpp",
        "include/boost/intrusive/detail/array_initializer.hpp",
        "include/boost/intrusive/detail/assert.hpp",
        "include/boost/intrusive/detail/avltree_node.hpp",
        "include/boost/intrusive/detail/bstree_algorithms_base.hpp",
        "include/boost/intrusive/detail/common_slist_algorithms.hpp",
        "include/boost/intrusive/detail/config_begin.hpp",
        "include/boost/intrusive/detail/config_end.hpp",
        "include/boost/intrusive/detail/default_header_holder.hpp",
        "include/boost/intrusive/detail/ebo_functor_holder.hpp",
        "include/boost/intrusive/detail/empty_node_checker.hpp",
        "include/boost/intrusive/detail/equal_to_value.hpp",
        "include/boost/intrusive/detail/exception_disposer.hpp",
        "include/boost/intrusive/detail/function_detector.hpp",
        "include/boost/intrusive/detail/generic_hook.hpp",
        "include/boost/intrusive/detail/get_value_traits.hpp",
        "include/boost/intrusive/detail/has_member_function_callable_with.hpp",
        "include/boost/intrusive/detail/hashtable_node.hpp",
        "include/boost/intrusive/detail/hook_traits.hpp",
        "include/boost/intrusive/detail/iiterator.hpp",
        "include/boost/intrusive/detail/is_stateful_value_traits.hpp",
        "include/boost/intrusive/detail/iterator.hpp",
        "include/boost/intrusive/detail/key_nodeptr_comp.hpp",
        "include/boost/intrusive/detail/list_iterator.hpp",
        "include/boost/intrusive/detail/list_node.hpp",
        "include/boost/intrusive/detail/math.hpp",
        "include/boost/intrusive/detail/minimal_less_equal_header.hpp",
        "include/boost/intrusive/detail/minimal_pair_header.hpp",
        "include/boost/intrusive/detail/mpl.hpp",
        "include/boost/intrusive/detail/node_cloner_disposer.hpp",
        "include/boost/intrusive/detail/node_holder.hpp",
        "include/boost/intrusive/detail/node_to_value.hpp",
        "include/boost/intrusive/detail/parent_from_member.hpp",
        "include/boost/intrusive/detail/pointer_element.hpp",
        "include/boost/intrusive/detail/rbtree_node.hpp",
        "include/boost/intrusive/detail/reverse_iterator.hpp",
        "include/boost/intrusive/detail/simple_disposers.hpp",
        "include/boost/intrusive/detail/size_holder.hpp",
        "include/boost/intrusive/detail/slist_iterator.hpp",
        "include/boost/intrusive/detail/slist_node.hpp",
        "include/boost/intrusive/detail/std_fwd.hpp",
        "include/boost/intrusive/detail/to_raw_pointer.hpp",
        "include/boost/intrusive/detail/transform_iterator.hpp",
        "include/boost/intrusive/detail/tree_iterator.hpp",
        "include/boost/intrusive/detail/tree_node.hpp",
        "include/boost/intrusive/detail/uncast.hpp",
        "include/boost/intrusive/detail/workaround.hpp",
        "include/boost/intrusive/hashtable.hpp",
        "include/boost/intrusive/intrusive_fwd.hpp",
        "include/boost/intrusive/linear_slist_algorithms.hpp",
        "include/boost/intrusive/link_mode.hpp",
        "include/boost/intrusive/list.hpp",
        "include/boost/intrusive/list_hook.hpp",
        "include/boost/intrusive/member_value_traits.hpp",
        "include/boost/intrusive/options.hpp",
        "include/boost/intrusive/pack_options.hpp",
        "include/boost/intrusive/parent_from_member.hpp",
        "include/boost/intrusive/pointer_plus_bits.hpp",
        "include/boost/intrusive/pointer_rebind.hpp",
        "include/boost/intrusive/pointer_traits.hpp",
        "include/boost/intrusive/priority_compare.hpp",
        "include/boost/intrusive/rbtree.hpp",
        "include/boost/intrusive/rbtree_algorithms.hpp",
        "include/boost/intrusive/set.hpp",
        "include/boost/intrusive/set_hook.hpp",
        "include/boost/intrusive/sg_set.hpp",
        "include/boost/intrusive/sgtree.hpp",
        "include/boost/intrusive/sgtree_algorithms.hpp",
        "include/boost/intrusive/slist.hpp",
        "include/boost/intrusive/slist_hook.hpp",
        "include/boost/intrusive/splay_set.hpp",
        "include/boost/intrusive/splaytree.hpp",
        "include/boost/intrusive/splaytree_algorithms.hpp",
        "include/boost/intrusive/treap.hpp",
        "include/boost/intrusive/treap_algorithms.hpp",
        "include/boost/intrusive/treap_set.hpp",
        "include/boost/intrusive/trivial_value_traits.hpp",
        "include/boost/intrusive/unordered_set.hpp",
        "include/boost/intrusive/unordered_set_hook.hpp",
    ],
    copts = [],
    deps = [
        ":headers_only",
        # Because of boost/move/utility_core.hpp:
        "@boost_move//:headers_only",
        # Because of boost/static_assert.hpp:
        "@boost_static_assert//:headers_only",
        # Because of boost/config.hpp:
        "@boost_config//:headers_only",
        # Because of boost/core/no_exceptions_support.hpp:
        "@boost_core//:headers_only",
        # Because of boost/functional/hash.hpp:
        "@boost_functional//:headers_only",
        # Because of boost/assert.hpp:
        "@boost_assert//:headers_only",
        # Because of boost/type_traits/is_integral.hpp:
        "@boost_type_traits//:headers_only",
        # Because of boost/integer/static_log2.hpp:
        "@boost_integer//:headers_only",
        # Because of boost/preprocessor/repetition/repeat_from_to.hpp:
        "@boost_preprocessor//:headers_only",
        # Because of boost/detail/container_fwd.hpp:
        "@boost_detail//:headers_only",
        # Because of boost/mpl/aux_/lambda_support.hpp:
        "@boost_mpl//:headers_only",
    ],
)
