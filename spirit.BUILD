package(default_visibility = ["//visibility:public"])

cc_library(
    name = "headers_only",
    hdrs = [
        "include/boost/spirit.hpp",
        "include/boost/spirit/home/classic.hpp",
        "include/boost/spirit/home/classic/actor.hpp",
        "include/boost/spirit/home/classic/actor/assign_actor.hpp",
        "include/boost/spirit/home/classic/actor/assign_key_actor.hpp",
        "include/boost/spirit/home/classic/actor/clear_actor.hpp",
        "include/boost/spirit/home/classic/actor/decrement_actor.hpp",
        "include/boost/spirit/home/classic/actor/erase_actor.hpp",
        "include/boost/spirit/home/classic/actor/increment_actor.hpp",
        "include/boost/spirit/home/classic/actor/insert_at_actor.hpp",
        "include/boost/spirit/home/classic/actor/insert_key_actor.hpp",
        "include/boost/spirit/home/classic/actor/push_back_actor.hpp",
        "include/boost/spirit/home/classic/actor/push_front_actor.hpp",
        "include/boost/spirit/home/classic/actor/ref_actor.hpp",
        "include/boost/spirit/home/classic/actor/ref_const_ref_actor.hpp",
        "include/boost/spirit/home/classic/actor/ref_const_ref_const_ref_a.hpp",
        "include/boost/spirit/home/classic/actor/ref_const_ref_value_actor.hpp",
        "include/boost/spirit/home/classic/actor/ref_value_actor.hpp",
        "include/boost/spirit/home/classic/actor/swap_actor.hpp",
        "include/boost/spirit/home/classic/actor/typeof.hpp",
        "include/boost/spirit/home/classic/attribute.hpp",
        "include/boost/spirit/home/classic/attribute/closure.hpp",
        "include/boost/spirit/home/classic/attribute/closure_context.hpp",
        "include/boost/spirit/home/classic/attribute/closure_fwd.hpp",
        "include/boost/spirit/home/classic/attribute/parametric.hpp",
        "include/boost/spirit/home/classic/attribute/typeof.hpp",
        "include/boost/spirit/home/classic/core.hpp",
        "include/boost/spirit/home/classic/core/assert.hpp",
        "include/boost/spirit/home/classic/core/composite/actions.hpp",
        "include/boost/spirit/home/classic/core/composite/alternative.hpp",
        "include/boost/spirit/home/classic/core/composite/composite.hpp",
        "include/boost/spirit/home/classic/core/composite/difference.hpp",
        "include/boost/spirit/home/classic/core/composite/directives.hpp",
        "include/boost/spirit/home/classic/core/composite/epsilon.hpp",
        "include/boost/spirit/home/classic/core/composite/exclusive_or.hpp",
        "include/boost/spirit/home/classic/core/composite/impl/alternative.ipp",
        "include/boost/spirit/home/classic/core/composite/impl/difference.ipp",
        "include/boost/spirit/home/classic/core/composite/impl/directives.ipp",
        "include/boost/spirit/home/classic/core/composite/impl/exclusive_or.ipp",
        "include/boost/spirit/home/classic/core/composite/impl/intersection.ipp",
        "include/boost/spirit/home/classic/core/composite/impl/kleene_star.ipp",
        "include/boost/spirit/home/classic/core/composite/impl/list.ipp",
        "include/boost/spirit/home/classic/core/composite/impl/optional.ipp",
        "include/boost/spirit/home/classic/core/composite/impl/positive.ipp",
        "include/boost/spirit/home/classic/core/composite/impl/sequence.ipp",
        "include/boost/spirit/home/classic/core/composite/impl/sequential_and.ipp",
        "include/boost/spirit/home/classic/core/composite/impl/sequential_or.ipp",
        "include/boost/spirit/home/classic/core/composite/intersection.hpp",
        "include/boost/spirit/home/classic/core/composite/kleene_star.hpp",
        "include/boost/spirit/home/classic/core/composite/list.hpp",
        "include/boost/spirit/home/classic/core/composite/no_actions.hpp",
        "include/boost/spirit/home/classic/core/composite/operators.hpp",
        "include/boost/spirit/home/classic/core/composite/optional.hpp",
        "include/boost/spirit/home/classic/core/composite/positive.hpp",
        "include/boost/spirit/home/classic/core/composite/sequence.hpp",
        "include/boost/spirit/home/classic/core/composite/sequential_and.hpp",
        "include/boost/spirit/home/classic/core/composite/sequential_or.hpp",
        "include/boost/spirit/home/classic/core/config.hpp",
        "include/boost/spirit/home/classic/core/impl/match.ipp",
        "include/boost/spirit/home/classic/core/impl/match_attr_traits.ipp",
        "include/boost/spirit/home/classic/core/impl/parser.ipp",
        "include/boost/spirit/home/classic/core/match.hpp",
        "include/boost/spirit/home/classic/core/nil.hpp",
        "include/boost/spirit/home/classic/core/non_terminal/grammar.hpp",
        "include/boost/spirit/home/classic/core/non_terminal/impl/grammar.ipp",
        "include/boost/spirit/home/classic/core/non_terminal/impl/object_with_id.ipp",
        "include/boost/spirit/home/classic/core/non_terminal/impl/rule.ipp",
        "include/boost/spirit/home/classic/core/non_terminal/impl/static.hpp",
        "include/boost/spirit/home/classic/core/non_terminal/impl/subrule.ipp",
        "include/boost/spirit/home/classic/core/non_terminal/parser_context.hpp",
        "include/boost/spirit/home/classic/core/non_terminal/parser_id.hpp",
        "include/boost/spirit/home/classic/core/non_terminal/rule.hpp",
        "include/boost/spirit/home/classic/core/non_terminal/subrule.hpp",
        "include/boost/spirit/home/classic/core/non_terminal/subrule_fwd.hpp",
        "include/boost/spirit/home/classic/core/parser.hpp",
        "include/boost/spirit/home/classic/core/primitives/impl/numerics.ipp",
        "include/boost/spirit/home/classic/core/primitives/impl/primitives.ipp",
        "include/boost/spirit/home/classic/core/primitives/numerics.hpp",
        "include/boost/spirit/home/classic/core/primitives/numerics_fwd.hpp",
        "include/boost/spirit/home/classic/core/primitives/primitives.hpp",
        "include/boost/spirit/home/classic/core/safe_bool.hpp",
        "include/boost/spirit/home/classic/core/scanner/impl/skipper.ipp",
        "include/boost/spirit/home/classic/core/scanner/scanner.hpp",
        "include/boost/spirit/home/classic/core/scanner/scanner_fwd.hpp",
        "include/boost/spirit/home/classic/core/scanner/skipper.hpp",
        "include/boost/spirit/home/classic/core/scanner/skipper_fwd.hpp",
        "include/boost/spirit/home/classic/core/typeof.hpp",
        "include/boost/spirit/home/classic/debug.hpp",
        "include/boost/spirit/home/classic/debug/debug_node.hpp",
        "include/boost/spirit/home/classic/debug/impl/parser_names.ipp",
        "include/boost/spirit/home/classic/debug/minimal.hpp",
        "include/boost/spirit/home/classic/debug/parser_names.hpp",
        "include/boost/spirit/home/classic/debug/typeof.hpp",
        "include/boost/spirit/home/classic/dynamic.hpp",
        "include/boost/spirit/home/classic/dynamic/for.hpp",
        "include/boost/spirit/home/classic/dynamic/if.hpp",
        "include/boost/spirit/home/classic/dynamic/impl/conditions.ipp",
        "include/boost/spirit/home/classic/dynamic/impl/select.ipp",
        "include/boost/spirit/home/classic/dynamic/impl/switch.ipp",
        "include/boost/spirit/home/classic/dynamic/lazy.hpp",
        "include/boost/spirit/home/classic/dynamic/rule_alias.hpp",
        "include/boost/spirit/home/classic/dynamic/select.hpp",
        "include/boost/spirit/home/classic/dynamic/stored_rule.hpp",
        "include/boost/spirit/home/classic/dynamic/stored_rule_fwd.hpp",
        "include/boost/spirit/home/classic/dynamic/switch.hpp",
        "include/boost/spirit/home/classic/dynamic/typeof.hpp",
        "include/boost/spirit/home/classic/dynamic/while.hpp",
        "include/boost/spirit/home/classic/error_handling.hpp",
        "include/boost/spirit/home/classic/error_handling/exceptions.hpp",
        "include/boost/spirit/home/classic/error_handling/exceptions_fwd.hpp",
        "include/boost/spirit/home/classic/error_handling/impl/exceptions.ipp",
        "include/boost/spirit/home/classic/error_handling/typeof.hpp",
        "include/boost/spirit/home/classic/iterator.hpp",
        "include/boost/spirit/home/classic/iterator/file_iterator.hpp",
        "include/boost/spirit/home/classic/iterator/file_iterator_fwd.hpp",
        "include/boost/spirit/home/classic/iterator/fixed_size_queue.hpp",
        "include/boost/spirit/home/classic/iterator/impl/file_iterator.ipp",
        "include/boost/spirit/home/classic/iterator/impl/position_iterator.ipp",
        "include/boost/spirit/home/classic/iterator/multi_pass.hpp",
        "include/boost/spirit/home/classic/iterator/multi_pass_fwd.hpp",
        "include/boost/spirit/home/classic/iterator/position_iterator.hpp",
        "include/boost/spirit/home/classic/iterator/position_iterator_fwd.hpp",
        "include/boost/spirit/home/classic/iterator/typeof.hpp",
        "include/boost/spirit/home/classic/meta.hpp",
        "include/boost/spirit/home/classic/meta/as_parser.hpp",
        "include/boost/spirit/home/classic/meta/fundamental.hpp",
        "include/boost/spirit/home/classic/meta/impl/fundamental.ipp",
        "include/boost/spirit/home/classic/meta/impl/parser_traits.ipp",
        "include/boost/spirit/home/classic/meta/impl/refactoring.ipp",
        "include/boost/spirit/home/classic/meta/impl/traverse.ipp",
        "include/boost/spirit/home/classic/meta/parser_traits.hpp",
        "include/boost/spirit/home/classic/meta/refactoring.hpp",
        "include/boost/spirit/home/classic/meta/traverse.hpp",
        "include/boost/spirit/home/classic/namespace.hpp",
        "include/boost/spirit/home/classic/phoenix.hpp",
        "include/boost/spirit/home/classic/phoenix/actor.hpp",
        "include/boost/spirit/home/classic/phoenix/binders.hpp",
        "include/boost/spirit/home/classic/phoenix/casts.hpp",
        "include/boost/spirit/home/classic/phoenix/closures.hpp",
        "include/boost/spirit/home/classic/phoenix/composite.hpp",
        "include/boost/spirit/home/classic/phoenix/functions.hpp",
        "include/boost/spirit/home/classic/phoenix/new.hpp",
        "include/boost/spirit/home/classic/phoenix/operators.hpp",
        "include/boost/spirit/home/classic/phoenix/primitives.hpp",
        "include/boost/spirit/home/classic/phoenix/special_ops.hpp",
        "include/boost/spirit/home/classic/phoenix/statements.hpp",
        "include/boost/spirit/home/classic/phoenix/tuple_helpers.hpp",
        "include/boost/spirit/home/classic/phoenix/tuples.hpp",
        "include/boost/spirit/home/classic/symbols.hpp",
        "include/boost/spirit/home/classic/symbols/impl/symbols.ipp",
        "include/boost/spirit/home/classic/symbols/impl/tst.ipp",
        "include/boost/spirit/home/classic/symbols/symbols.hpp",
        "include/boost/spirit/home/classic/symbols/symbols_fwd.hpp",
        "include/boost/spirit/home/classic/symbols/typeof.hpp",
        "include/boost/spirit/home/classic/tree/ast.hpp",
        "include/boost/spirit/home/classic/tree/ast_fwd.hpp",
        "include/boost/spirit/home/classic/tree/common.hpp",
        "include/boost/spirit/home/classic/tree/common_fwd.hpp",
        "include/boost/spirit/home/classic/tree/impl/parse_tree_utils.ipp",
        "include/boost/spirit/home/classic/tree/impl/tree_to_xml.ipp",
        "include/boost/spirit/home/classic/tree/parse_tree.hpp",
        "include/boost/spirit/home/classic/tree/parse_tree_fwd.hpp",
        "include/boost/spirit/home/classic/tree/parse_tree_utils.hpp",
        "include/boost/spirit/home/classic/tree/tree_to_xml.hpp",
        "include/boost/spirit/home/classic/tree/typeof.hpp",
        "include/boost/spirit/home/classic/utility.hpp",
        "include/boost/spirit/home/classic/utility/chset.hpp",
        "include/boost/spirit/home/classic/utility/chset_operators.hpp",
        "include/boost/spirit/home/classic/utility/confix.hpp",
        "include/boost/spirit/home/classic/utility/confix_fwd.hpp",
        "include/boost/spirit/home/classic/utility/distinct.hpp",
        "include/boost/spirit/home/classic/utility/distinct_fwd.hpp",
        "include/boost/spirit/home/classic/utility/escape_char.hpp",
        "include/boost/spirit/home/classic/utility/escape_char_fwd.hpp",
        "include/boost/spirit/home/classic/utility/flush_multi_pass.hpp",
        "include/boost/spirit/home/classic/utility/functor_parser.hpp",
        "include/boost/spirit/home/classic/utility/grammar_def.hpp",
        "include/boost/spirit/home/classic/utility/grammar_def_fwd.hpp",
        "include/boost/spirit/home/classic/utility/impl/chset.ipp",
        "include/boost/spirit/home/classic/utility/impl/chset/basic_chset.hpp",
        "include/boost/spirit/home/classic/utility/impl/chset/basic_chset.ipp",
        "include/boost/spirit/home/classic/utility/impl/chset/range_run.hpp",
        "include/boost/spirit/home/classic/utility/impl/chset/range_run.ipp",
        "include/boost/spirit/home/classic/utility/impl/chset_operators.ipp",
        "include/boost/spirit/home/classic/utility/impl/confix.ipp",
        "include/boost/spirit/home/classic/utility/impl/escape_char.ipp",
        "include/boost/spirit/home/classic/utility/impl/lists.ipp",
        "include/boost/spirit/home/classic/utility/impl/regex.ipp",
        "include/boost/spirit/home/classic/utility/lists.hpp",
        "include/boost/spirit/home/classic/utility/lists_fwd.hpp",
        "include/boost/spirit/home/classic/utility/loops.hpp",
        "include/boost/spirit/home/classic/utility/regex.hpp",
        "include/boost/spirit/home/classic/utility/rule_parser.hpp",
        "include/boost/spirit/home/classic/utility/scoped_lock.hpp",
        "include/boost/spirit/home/classic/utility/typeof.hpp",
        "include/boost/spirit/home/classic/version.hpp",
        "include/boost/spirit/home/karma.hpp",
        "include/boost/spirit/home/karma/action.hpp",
        "include/boost/spirit/home/karma/action/action.hpp",
        "include/boost/spirit/home/karma/auto.hpp",
        "include/boost/spirit/home/karma/auto/auto.hpp",
        "include/boost/spirit/home/karma/auto/create_generator.hpp",
        "include/boost/spirit/home/karma/auto/meta_create.hpp",
        "include/boost/spirit/home/karma/auxiliary.hpp",
        "include/boost/spirit/home/karma/auxiliary/attr_cast.hpp",
        "include/boost/spirit/home/karma/auxiliary/eol.hpp",
        "include/boost/spirit/home/karma/auxiliary/eps.hpp",
        "include/boost/spirit/home/karma/auxiliary/lazy.hpp",
        "include/boost/spirit/home/karma/binary.hpp",
        "include/boost/spirit/home/karma/binary/binary.hpp",
        "include/boost/spirit/home/karma/binary/padding.hpp",
        "include/boost/spirit/home/karma/char.hpp",
        "include/boost/spirit/home/karma/char/char.hpp",
        "include/boost/spirit/home/karma/char/char_class.hpp",
        "include/boost/spirit/home/karma/char/char_generator.hpp",
        "include/boost/spirit/home/karma/delimit_flag.hpp",
        "include/boost/spirit/home/karma/delimit_out.hpp",
        "include/boost/spirit/home/karma/detail/alternative_function.hpp",
        "include/boost/spirit/home/karma/detail/as.hpp",
        "include/boost/spirit/home/karma/detail/attributes.hpp",
        "include/boost/spirit/home/karma/detail/default_width.hpp",
        "include/boost/spirit/home/karma/detail/enable_lit.hpp",
        "include/boost/spirit/home/karma/detail/extract_from.hpp",
        "include/boost/spirit/home/karma/detail/fail_function.hpp",
        "include/boost/spirit/home/karma/detail/generate.hpp",
        "include/boost/spirit/home/karma/detail/generate_auto.hpp",
        "include/boost/spirit/home/karma/detail/generate_to.hpp",
        "include/boost/spirit/home/karma/detail/get_casetag.hpp",
        "include/boost/spirit/home/karma/detail/get_stricttag.hpp",
        "include/boost/spirit/home/karma/detail/indirect_iterator.hpp",
        "include/boost/spirit/home/karma/detail/output_iterator.hpp",
        "include/boost/spirit/home/karma/detail/pass_container.hpp",
        "include/boost/spirit/home/karma/detail/string_compare.hpp",
        "include/boost/spirit/home/karma/detail/string_generate.hpp",
        "include/boost/spirit/home/karma/detail/unused_delimiter.hpp",
        "include/boost/spirit/home/karma/directive.hpp",
        "include/boost/spirit/home/karma/directive/as.hpp",
        "include/boost/spirit/home/karma/directive/buffer.hpp",
        "include/boost/spirit/home/karma/directive/center_alignment.hpp",
        "include/boost/spirit/home/karma/directive/columns.hpp",
        "include/boost/spirit/home/karma/directive/delimit.hpp",
        "include/boost/spirit/home/karma/directive/duplicate.hpp",
        "include/boost/spirit/home/karma/directive/encoding.hpp",
        "include/boost/spirit/home/karma/directive/left_alignment.hpp",
        "include/boost/spirit/home/karma/directive/maxwidth.hpp",
        "include/boost/spirit/home/karma/directive/no_delimit.hpp",
        "include/boost/spirit/home/karma/directive/omit.hpp",
        "include/boost/spirit/home/karma/directive/repeat.hpp",
        "include/boost/spirit/home/karma/directive/right_alignment.hpp",
        "include/boost/spirit/home/karma/directive/strict_relaxed.hpp",
        "include/boost/spirit/home/karma/directive/upper_lower_case.hpp",
        "include/boost/spirit/home/karma/directive/verbatim.hpp",
        "include/boost/spirit/home/karma/domain.hpp",
        "include/boost/spirit/home/karma/format.hpp",
        "include/boost/spirit/home/karma/format_auto.hpp",
        "include/boost/spirit/home/karma/generate.hpp",
        "include/boost/spirit/home/karma/generate_attr.hpp",
        "include/boost/spirit/home/karma/generator.hpp",
        "include/boost/spirit/home/karma/meta_compiler.hpp",
        "include/boost/spirit/home/karma/nonterminal.hpp",
        "include/boost/spirit/home/karma/nonterminal/debug_handler.hpp",
        "include/boost/spirit/home/karma/nonterminal/debug_handler_state.hpp",
        "include/boost/spirit/home/karma/nonterminal/detail/fcall.hpp",
        "include/boost/spirit/home/karma/nonterminal/detail/generator_binder.hpp",
        "include/boost/spirit/home/karma/nonterminal/detail/parameterized.hpp",
        "include/boost/spirit/home/karma/nonterminal/grammar.hpp",
        "include/boost/spirit/home/karma/nonterminal/nonterminal_fwd.hpp",
        "include/boost/spirit/home/karma/nonterminal/rule.hpp",
        "include/boost/spirit/home/karma/nonterminal/simple_trace.hpp",
        "include/boost/spirit/home/karma/numeric.hpp",
        "include/boost/spirit/home/karma/numeric/bool.hpp",
        "include/boost/spirit/home/karma/numeric/bool_policies.hpp",
        "include/boost/spirit/home/karma/numeric/detail/bool_utils.hpp",
        "include/boost/spirit/home/karma/numeric/detail/numeric_utils.hpp",
        "include/boost/spirit/home/karma/numeric/detail/real_utils.hpp",
        "include/boost/spirit/home/karma/numeric/int.hpp",
        "include/boost/spirit/home/karma/numeric/real.hpp",
        "include/boost/spirit/home/karma/numeric/real_policies.hpp",
        "include/boost/spirit/home/karma/numeric/uint.hpp",
        "include/boost/spirit/home/karma/operator.hpp",
        "include/boost/spirit/home/karma/operator/alternative.hpp",
        "include/boost/spirit/home/karma/operator/and_predicate.hpp",
        "include/boost/spirit/home/karma/operator/kleene.hpp",
        "include/boost/spirit/home/karma/operator/list.hpp",
        "include/boost/spirit/home/karma/operator/not_predicate.hpp",
        "include/boost/spirit/home/karma/operator/optional.hpp",
        "include/boost/spirit/home/karma/operator/plus.hpp",
        "include/boost/spirit/home/karma/operator/sequence.hpp",
        "include/boost/spirit/home/karma/phoenix_attributes.hpp",
        "include/boost/spirit/home/karma/reference.hpp",
        "include/boost/spirit/home/karma/stream.hpp",
        "include/boost/spirit/home/karma/stream/detail/format_manip.hpp",
        "include/boost/spirit/home/karma/stream/detail/format_manip_auto.hpp",
        "include/boost/spirit/home/karma/stream/detail/iterator_sink.hpp",
        "include/boost/spirit/home/karma/stream/format_manip.hpp",
        "include/boost/spirit/home/karma/stream/format_manip_attr.hpp",
        "include/boost/spirit/home/karma/stream/ostream_iterator.hpp",
        "include/boost/spirit/home/karma/stream/stream.hpp",
        "include/boost/spirit/home/karma/string.hpp",
        "include/boost/spirit/home/karma/string/lit.hpp",
        "include/boost/spirit/home/karma/string/symbols.hpp",
        "include/boost/spirit/home/karma/what.hpp",
        "include/boost/spirit/home/lex.hpp",
        "include/boost/spirit/home/lex/argument.hpp",
        "include/boost/spirit/home/lex/argument_phoenix.hpp",
        "include/boost/spirit/home/lex/detail/sequence_function.hpp",
        "include/boost/spirit/home/lex/domain.hpp",
        "include/boost/spirit/home/lex/lexer.hpp",
        "include/boost/spirit/home/lex/lexer/action.hpp",
        "include/boost/spirit/home/lex/lexer/char_token_def.hpp",
        "include/boost/spirit/home/lex/lexer/lexer.hpp",
        "include/boost/spirit/home/lex/lexer/lexertl/functor.hpp",
        "include/boost/spirit/home/lex/lexer/lexertl/functor_data.hpp",
        "include/boost/spirit/home/lex/lexer/lexertl/generate_static.hpp",
        "include/boost/spirit/home/lex/lexer/lexertl/iterator.hpp",
        "include/boost/spirit/home/lex/lexer/lexertl/iterator_tokenizer.hpp",
        "include/boost/spirit/home/lex/lexer/lexertl/lexer.hpp",
        "include/boost/spirit/home/lex/lexer/lexertl/position_token.hpp",
        "include/boost/spirit/home/lex/lexer/lexertl/semantic_action_data.hpp",
        "include/boost/spirit/home/lex/lexer/lexertl/static_functor_data.hpp",
        "include/boost/spirit/home/lex/lexer/lexertl/static_lexer.hpp",
        "include/boost/spirit/home/lex/lexer/lexertl/static_version.hpp",
        "include/boost/spirit/home/lex/lexer/lexertl/token.hpp",
        "include/boost/spirit/home/lex/lexer/lexertl/wrap_action.hpp",
        "include/boost/spirit/home/lex/lexer/pass_flags.hpp",
        "include/boost/spirit/home/lex/lexer/sequence.hpp",
        "include/boost/spirit/home/lex/lexer/string_token_def.hpp",
        "include/boost/spirit/home/lex/lexer/support_functions.hpp",
        "include/boost/spirit/home/lex/lexer/support_functions_expression.hpp",
        "include/boost/spirit/home/lex/lexer/terminals.hpp",
        "include/boost/spirit/home/lex/lexer/token_def.hpp",
        "include/boost/spirit/home/lex/lexer_lexertl.hpp",
        "include/boost/spirit/home/lex/lexer_static_lexertl.hpp",
        "include/boost/spirit/home/lex/lexer_type.hpp",
        "include/boost/spirit/home/lex/meta_compiler.hpp",
        "include/boost/spirit/home/lex/primitives.hpp",
        "include/boost/spirit/home/lex/qi.hpp",
        "include/boost/spirit/home/lex/qi/in_state.hpp",
        "include/boost/spirit/home/lex/qi/plain_raw_token.hpp",
        "include/boost/spirit/home/lex/qi/plain_token.hpp",
        "include/boost/spirit/home/lex/qi/plain_tokenid.hpp",
        "include/boost/spirit/home/lex/qi/plain_tokenid_mask.hpp",
        "include/boost/spirit/home/lex/qi/state_switcher.hpp",
        "include/boost/spirit/home/lex/reference.hpp",
        "include/boost/spirit/home/lex/tokenize_and_parse.hpp",
        "include/boost/spirit/home/lex/tokenize_and_parse_attr.hpp",
        "include/boost/spirit/home/qi.hpp",
        "include/boost/spirit/home/qi/action.hpp",
        "include/boost/spirit/home/qi/action/action.hpp",
        "include/boost/spirit/home/qi/auto.hpp",
        "include/boost/spirit/home/qi/auto/auto.hpp",
        "include/boost/spirit/home/qi/auto/create_parser.hpp",
        "include/boost/spirit/home/qi/auto/meta_create.hpp",
        "include/boost/spirit/home/qi/auxiliary.hpp",
        "include/boost/spirit/home/qi/auxiliary/attr.hpp",
        "include/boost/spirit/home/qi/auxiliary/attr_cast.hpp",
        "include/boost/spirit/home/qi/auxiliary/eoi.hpp",
        "include/boost/spirit/home/qi/auxiliary/eol.hpp",
        "include/boost/spirit/home/qi/auxiliary/eps.hpp",
        "include/boost/spirit/home/qi/auxiliary/lazy.hpp",
        "include/boost/spirit/home/qi/binary.hpp",
        "include/boost/spirit/home/qi/binary/binary.hpp",
        "include/boost/spirit/home/qi/char.hpp",
        "include/boost/spirit/home/qi/char/char.hpp",
        "include/boost/spirit/home/qi/char/char_class.hpp",
        "include/boost/spirit/home/qi/char/char_parser.hpp",
        "include/boost/spirit/home/qi/copy.hpp",
        "include/boost/spirit/home/qi/detail/alternative_function.hpp",
        "include/boost/spirit/home/qi/detail/assign_to.hpp",
        "include/boost/spirit/home/qi/detail/attributes.hpp",
        "include/boost/spirit/home/qi/detail/construct.hpp",
        "include/boost/spirit/home/qi/detail/enable_lit.hpp",
        "include/boost/spirit/home/qi/detail/expect_function.hpp",
        "include/boost/spirit/home/qi/detail/expectation_failure.hpp",
        "include/boost/spirit/home/qi/detail/fail_function.hpp",
        "include/boost/spirit/home/qi/detail/parse.hpp",
        "include/boost/spirit/home/qi/detail/parse_auto.hpp",
        "include/boost/spirit/home/qi/detail/pass_container.hpp",
        "include/boost/spirit/home/qi/detail/pass_function.hpp",
        "include/boost/spirit/home/qi/detail/permute_function.hpp",
        "include/boost/spirit/home/qi/detail/string_parse.hpp",
        "include/boost/spirit/home/qi/detail/unused_skipper.hpp",
        "include/boost/spirit/home/qi/directive.hpp",
        "include/boost/spirit/home/qi/directive/as.hpp",
        "include/boost/spirit/home/qi/directive/encoding.hpp",
        "include/boost/spirit/home/qi/directive/expect.hpp",
        "include/boost/spirit/home/qi/directive/hold.hpp",
        "include/boost/spirit/home/qi/directive/lexeme.hpp",
        "include/boost/spirit/home/qi/directive/matches.hpp",
        "include/boost/spirit/home/qi/directive/no_case.hpp",
        "include/boost/spirit/home/qi/directive/no_skip.hpp",
        "include/boost/spirit/home/qi/directive/omit.hpp",
        "include/boost/spirit/home/qi/directive/raw.hpp",
        "include/boost/spirit/home/qi/directive/repeat.hpp",
        "include/boost/spirit/home/qi/directive/skip.hpp",
        "include/boost/spirit/home/qi/domain.hpp",
        "include/boost/spirit/home/qi/match.hpp",
        "include/boost/spirit/home/qi/match_auto.hpp",
        "include/boost/spirit/home/qi/meta_compiler.hpp",
        "include/boost/spirit/home/qi/nonterminal.hpp",
        "include/boost/spirit/home/qi/nonterminal/debug_handler.hpp",
        "include/boost/spirit/home/qi/nonterminal/debug_handler_state.hpp",
        "include/boost/spirit/home/qi/nonterminal/detail/fcall.hpp",
        "include/boost/spirit/home/qi/nonterminal/detail/parameterized.hpp",
        "include/boost/spirit/home/qi/nonterminal/detail/parser_binder.hpp",
        "include/boost/spirit/home/qi/nonterminal/error_handler.hpp",
        "include/boost/spirit/home/qi/nonterminal/grammar.hpp",
        "include/boost/spirit/home/qi/nonterminal/nonterminal_fwd.hpp",
        "include/boost/spirit/home/qi/nonterminal/rule.hpp",
        "include/boost/spirit/home/qi/nonterminal/simple_trace.hpp",
        "include/boost/spirit/home/qi/nonterminal/success_handler.hpp",
        "include/boost/spirit/home/qi/numeric.hpp",
        "include/boost/spirit/home/qi/numeric/bool.hpp",
        "include/boost/spirit/home/qi/numeric/bool_policies.hpp",
        "include/boost/spirit/home/qi/numeric/detail/numeric_utils.hpp",
        "include/boost/spirit/home/qi/numeric/detail/real_impl.hpp",
        "include/boost/spirit/home/qi/numeric/int.hpp",
        "include/boost/spirit/home/qi/numeric/numeric_utils.hpp",
        "include/boost/spirit/home/qi/numeric/real.hpp",
        "include/boost/spirit/home/qi/numeric/real_policies.hpp",
        "include/boost/spirit/home/qi/numeric/uint.hpp",
        "include/boost/spirit/home/qi/operator.hpp",
        "include/boost/spirit/home/qi/operator/alternative.hpp",
        "include/boost/spirit/home/qi/operator/and_predicate.hpp",
        "include/boost/spirit/home/qi/operator/difference.hpp",
        "include/boost/spirit/home/qi/operator/expect.hpp",
        "include/boost/spirit/home/qi/operator/kleene.hpp",
        "include/boost/spirit/home/qi/operator/list.hpp",
        "include/boost/spirit/home/qi/operator/not_predicate.hpp",
        "include/boost/spirit/home/qi/operator/optional.hpp",
        "include/boost/spirit/home/qi/operator/permutation.hpp",
        "include/boost/spirit/home/qi/operator/plus.hpp",
        "include/boost/spirit/home/qi/operator/sequence.hpp",
        "include/boost/spirit/home/qi/operator/sequence_base.hpp",
        "include/boost/spirit/home/qi/operator/sequential_or.hpp",
        "include/boost/spirit/home/qi/parse.hpp",
        "include/boost/spirit/home/qi/parse_attr.hpp",
        "include/boost/spirit/home/qi/parser.hpp",
        "include/boost/spirit/home/qi/reference.hpp",
        "include/boost/spirit/home/qi/skip_flag.hpp",
        "include/boost/spirit/home/qi/skip_over.hpp",
        "include/boost/spirit/home/qi/stream.hpp",
        "include/boost/spirit/home/qi/stream/detail/iterator_source.hpp",
        "include/boost/spirit/home/qi/stream/detail/match_manip.hpp",
        "include/boost/spirit/home/qi/stream/detail/match_manip_auto.hpp",
        "include/boost/spirit/home/qi/stream/match_manip.hpp",
        "include/boost/spirit/home/qi/stream/match_manip_attr.hpp",
        "include/boost/spirit/home/qi/stream/stream.hpp",
        "include/boost/spirit/home/qi/string.hpp",
        "include/boost/spirit/home/qi/string/detail/tst.hpp",
        "include/boost/spirit/home/qi/string/lit.hpp",
        "include/boost/spirit/home/qi/string/symbols.hpp",
        "include/boost/spirit/home/qi/string/tst.hpp",
        "include/boost/spirit/home/qi/string/tst_map.hpp",
        "include/boost/spirit/home/qi/what.hpp",
        "include/boost/spirit/home/support.hpp",
        "include/boost/spirit/home/support/action_dispatch.hpp",
        "include/boost/spirit/home/support/adapt_adt_attributes.hpp",
        "include/boost/spirit/home/support/algorithm/any.hpp",
        "include/boost/spirit/home/support/algorithm/any_if.hpp",
        "include/boost/spirit/home/support/algorithm/any_if_ns.hpp",
        "include/boost/spirit/home/support/algorithm/any_if_ns_so.hpp",
        "include/boost/spirit/home/support/algorithm/any_ns.hpp",
        "include/boost/spirit/home/support/algorithm/any_ns_so.hpp",
        "include/boost/spirit/home/support/argument.hpp",
        "include/boost/spirit/home/support/argument_expression.hpp",
        "include/boost/spirit/home/support/assert_msg.hpp",
        "include/boost/spirit/home/support/attributes.hpp",
        "include/boost/spirit/home/support/attributes_fwd.hpp",
        "include/boost/spirit/home/support/auto.hpp",
        "include/boost/spirit/home/support/auto/meta_create.hpp",
        "include/boost/spirit/home/support/auxiliary/attr_cast.hpp",
        "include/boost/spirit/home/support/char_class.hpp",
        "include/boost/spirit/home/support/char_encoding/ascii.hpp",
        "include/boost/spirit/home/support/char_encoding/iso8859_1.hpp",
        "include/boost/spirit/home/support/char_encoding/standard.hpp",
        "include/boost/spirit/home/support/char_encoding/standard_wide.hpp",
        "include/boost/spirit/home/support/char_encoding/unicode.hpp",
        "include/boost/spirit/home/support/char_encoding/unicode/category_table.hpp",
        "include/boost/spirit/home/support/char_encoding/unicode/lowercase_table.hpp",
        "include/boost/spirit/home/support/char_encoding/unicode/query.hpp",
        "include/boost/spirit/home/support/char_encoding/unicode/script_table.hpp",
        "include/boost/spirit/home/support/char_encoding/unicode/uppercase_table.hpp",
        "include/boost/spirit/home/support/char_set/basic_chset.hpp",
        "include/boost/spirit/home/support/char_set/range.hpp",
        "include/boost/spirit/home/support/char_set/range_functions.hpp",
        "include/boost/spirit/home/support/char_set/range_run.hpp",
        "include/boost/spirit/home/support/char_set/range_run_impl.hpp",
        "include/boost/spirit/home/support/common_terminals.hpp",
        "include/boost/spirit/home/support/container.hpp",
        "include/boost/spirit/home/support/context.hpp",
        "include/boost/spirit/home/support/detail/as_variant.hpp",
        "include/boost/spirit/home/support/detail/endian.hpp",
        "include/boost/spirit/home/support/detail/endian/cover_operators.hpp",
        "include/boost/spirit/home/support/detail/endian/endian.hpp",
        "include/boost/spirit/home/support/detail/get_encoding.hpp",
        "include/boost/spirit/home/support/detail/hold_any.hpp",
        "include/boost/spirit/home/support/detail/is_spirit_tag.hpp",
        "include/boost/spirit/home/support/detail/lexer/char_traits.hpp",
        "include/boost/spirit/home/support/detail/lexer/consts.hpp",
        "include/boost/spirit/home/support/detail/lexer/containers/ptr_list.hpp",
        "include/boost/spirit/home/support/detail/lexer/containers/ptr_vector.hpp",
        "include/boost/spirit/home/support/detail/lexer/conversion/char_state_machine.hpp",
        "include/boost/spirit/home/support/detail/lexer/debug.hpp",
        "include/boost/spirit/home/support/detail/lexer/file_input.hpp",
        "include/boost/spirit/home/support/detail/lexer/generate_cpp.hpp",
        "include/boost/spirit/home/support/detail/lexer/generate_re2c.hpp",
        "include/boost/spirit/home/support/detail/lexer/generator.hpp",
        "include/boost/spirit/home/support/detail/lexer/input.hpp",
        "include/boost/spirit/home/support/detail/lexer/internals.hpp",
        "include/boost/spirit/home/support/detail/lexer/parser/parser.hpp",
        "include/boost/spirit/home/support/detail/lexer/parser/tokeniser/num_token.hpp",
        "include/boost/spirit/home/support/detail/lexer/parser/tokeniser/re_tokeniser.hpp",
        "include/boost/spirit/home/support/detail/lexer/parser/tokeniser/re_tokeniser_helper.hpp",
        "include/boost/spirit/home/support/detail/lexer/parser/tokeniser/re_tokeniser_state.hpp",
        "include/boost/spirit/home/support/detail/lexer/parser/tree/end_node.hpp",
        "include/boost/spirit/home/support/detail/lexer/parser/tree/iteration_node.hpp",
        "include/boost/spirit/home/support/detail/lexer/parser/tree/leaf_node.hpp",
        "include/boost/spirit/home/support/detail/lexer/parser/tree/node.hpp",
        "include/boost/spirit/home/support/detail/lexer/parser/tree/selection_node.hpp",
        "include/boost/spirit/home/support/detail/lexer/parser/tree/sequence_node.hpp",
        "include/boost/spirit/home/support/detail/lexer/partition/charset.hpp",
        "include/boost/spirit/home/support/detail/lexer/partition/equivset.hpp",
        "include/boost/spirit/home/support/detail/lexer/rules.hpp",
        "include/boost/spirit/home/support/detail/lexer/runtime_error.hpp",
        "include/boost/spirit/home/support/detail/lexer/serialise.hpp",
        "include/boost/spirit/home/support/detail/lexer/size_t.hpp",
        "include/boost/spirit/home/support/detail/lexer/state_machine.hpp",
        "include/boost/spirit/home/support/detail/lexer/string_token.hpp",
        "include/boost/spirit/home/support/detail/make_cons.hpp",
        "include/boost/spirit/home/support/detail/make_vector.hpp",
        "include/boost/spirit/home/support/detail/math/detail/fp_traits.hpp",
        "include/boost/spirit/home/support/detail/math/fpclassify.hpp",
        "include/boost/spirit/home/support/detail/math/signbit.hpp",
        "include/boost/spirit/home/support/detail/pow10.hpp",
        "include/boost/spirit/home/support/detail/scoped_enum_emulation.hpp",
        "include/boost/spirit/home/support/detail/sign.hpp",
        "include/boost/spirit/home/support/detail/what_function.hpp",
        "include/boost/spirit/home/support/extended_variant.hpp",
        "include/boost/spirit/home/support/handles_container.hpp",
        "include/boost/spirit/home/support/has_semantic_action.hpp",
        "include/boost/spirit/home/support/info.hpp",
        "include/boost/spirit/home/support/iterators/detail/buf_id_check_policy.hpp",
        "include/boost/spirit/home/support/iterators/detail/buffering_input_iterator_policy.hpp",
        "include/boost/spirit/home/support/iterators/detail/combine_policies.hpp",
        "include/boost/spirit/home/support/iterators/detail/first_owner_policy.hpp",
        "include/boost/spirit/home/support/iterators/detail/fixed_size_queue.hpp",
        "include/boost/spirit/home/support/iterators/detail/fixed_size_queue_policy.hpp",
        "include/boost/spirit/home/support/iterators/detail/functor_input_policy.hpp",
        "include/boost/spirit/home/support/iterators/detail/input_iterator_policy.hpp",
        "include/boost/spirit/home/support/iterators/detail/istream_policy.hpp",
        "include/boost/spirit/home/support/iterators/detail/lex_input_policy.hpp",
        "include/boost/spirit/home/support/iterators/detail/multi_pass.hpp",
        "include/boost/spirit/home/support/iterators/detail/no_check_policy.hpp",
        "include/boost/spirit/home/support/iterators/detail/ref_counted_policy.hpp",
        "include/boost/spirit/home/support/iterators/detail/split_functor_input_policy.hpp",
        "include/boost/spirit/home/support/iterators/detail/split_std_deque_policy.hpp",
        "include/boost/spirit/home/support/iterators/istream_iterator.hpp",
        "include/boost/spirit/home/support/iterators/line_pos_iterator.hpp",
        "include/boost/spirit/home/support/iterators/look_ahead.hpp",
        "include/boost/spirit/home/support/iterators/multi_pass.hpp",
        "include/boost/spirit/home/support/iterators/multi_pass_fwd.hpp",
        "include/boost/spirit/home/support/iterators/ostream_iterator.hpp",
        "include/boost/spirit/home/support/lazy.hpp",
        "include/boost/spirit/home/support/limits.hpp",
        "include/boost/spirit/home/support/make_component.hpp",
        "include/boost/spirit/home/support/meta_compiler.hpp",
        "include/boost/spirit/home/support/modify.hpp",
        "include/boost/spirit/home/support/multi_pass.hpp",
        "include/boost/spirit/home/support/multi_pass_wrapper.hpp",
        "include/boost/spirit/home/support/nonterminal/expand_arg.hpp",
        "include/boost/spirit/home/support/nonterminal/extract_param.hpp",
        "include/boost/spirit/home/support/nonterminal/locals.hpp",
        "include/boost/spirit/home/support/numeric_traits.hpp",
        "include/boost/spirit/home/support/sequence_base_id.hpp",
        "include/boost/spirit/home/support/string_traits.hpp",
        "include/boost/spirit/home/support/terminal.hpp",
        "include/boost/spirit/home/support/terminal_expression.hpp",
        "include/boost/spirit/home/support/unused.hpp",
        "include/boost/spirit/home/support/utf8.hpp",
        "include/boost/spirit/home/support/utree.hpp",
        "include/boost/spirit/home/support/utree/detail/utree_detail1.hpp",
        "include/boost/spirit/home/support/utree/detail/utree_detail2.hpp",
        "include/boost/spirit/home/support/utree/operators.hpp",
        "include/boost/spirit/home/support/utree/utree.hpp",
        "include/boost/spirit/home/support/utree/utree_traits.hpp",
        "include/boost/spirit/home/support/utree/utree_traits_fwd.hpp",
        "include/boost/spirit/home/x3.hpp",
        "include/boost/spirit/home/x3/auxiliary.hpp",
        "include/boost/spirit/home/x3/auxiliary/any_parser.hpp",
        "include/boost/spirit/home/x3/auxiliary/attr.hpp",
        "include/boost/spirit/home/x3/auxiliary/eoi.hpp",
        "include/boost/spirit/home/x3/auxiliary/eol.hpp",
        "include/boost/spirit/home/x3/auxiliary/eps.hpp",
        "include/boost/spirit/home/x3/auxiliary/guard.hpp",
        "include/boost/spirit/home/x3/binary.hpp",
        "include/boost/spirit/home/x3/binary/binary.hpp",
        "include/boost/spirit/home/x3/char.hpp",
        "include/boost/spirit/home/x3/char/any_char.hpp",
        "include/boost/spirit/home/x3/char/char.hpp",
        "include/boost/spirit/home/x3/char/char_class.hpp",
        "include/boost/spirit/home/x3/char/char_class_tags.hpp",
        "include/boost/spirit/home/x3/char/char_parser.hpp",
        "include/boost/spirit/home/x3/char/char_set.hpp",
        "include/boost/spirit/home/x3/char/detail/cast_char.hpp",
        "include/boost/spirit/home/x3/char/literal_char.hpp",
        "include/boost/spirit/home/x3/char/negated_char_parser.hpp",
        "include/boost/spirit/home/x3/char/unicode.hpp",
        "include/boost/spirit/home/x3/core.hpp",
        "include/boost/spirit/home/x3/core/action.hpp",
        "include/boost/spirit/home/x3/core/call.hpp",
        "include/boost/spirit/home/x3/core/detail/parse_into_container.hpp",
        "include/boost/spirit/home/x3/core/parse.hpp",
        "include/boost/spirit/home/x3/core/parser.hpp",
        "include/boost/spirit/home/x3/core/proxy.hpp",
        "include/boost/spirit/home/x3/core/skip_over.hpp",
        "include/boost/spirit/home/x3/directive.hpp",
        "include/boost/spirit/home/x3/directive/confix.hpp",
        "include/boost/spirit/home/x3/directive/expect.hpp",
        "include/boost/spirit/home/x3/directive/lexeme.hpp",
        "include/boost/spirit/home/x3/directive/matches.hpp",
        "include/boost/spirit/home/x3/directive/no_case.hpp",
        "include/boost/spirit/home/x3/directive/no_skip.hpp",
        "include/boost/spirit/home/x3/directive/omit.hpp",
        "include/boost/spirit/home/x3/directive/raw.hpp",
        "include/boost/spirit/home/x3/directive/repeat.hpp",
        "include/boost/spirit/home/x3/directive/seek.hpp",
        "include/boost/spirit/home/x3/directive/skip.hpp",
        "include/boost/spirit/home/x3/directive/with.hpp",
        "include/boost/spirit/home/x3/nonterminal.hpp",
        "include/boost/spirit/home/x3/nonterminal/debug_handler_state.hpp",
        "include/boost/spirit/home/x3/nonterminal/detail/rule.hpp",
        "include/boost/spirit/home/x3/nonterminal/detail/transform_attribute.hpp",
        "include/boost/spirit/home/x3/nonterminal/rule.hpp",
        "include/boost/spirit/home/x3/nonterminal/simple_trace.hpp",
        "include/boost/spirit/home/x3/numeric.hpp",
        "include/boost/spirit/home/x3/numeric/bool.hpp",
        "include/boost/spirit/home/x3/numeric/bool_policies.hpp",
        "include/boost/spirit/home/x3/numeric/int.hpp",
        "include/boost/spirit/home/x3/numeric/real.hpp",
        "include/boost/spirit/home/x3/numeric/real_policies.hpp",
        "include/boost/spirit/home/x3/numeric/uint.hpp",
        "include/boost/spirit/home/x3/operator.hpp",
        "include/boost/spirit/home/x3/operator/alternative.hpp",
        "include/boost/spirit/home/x3/operator/and_predicate.hpp",
        "include/boost/spirit/home/x3/operator/detail/alternative.hpp",
        "include/boost/spirit/home/x3/operator/detail/sequence.hpp",
        "include/boost/spirit/home/x3/operator/difference.hpp",
        "include/boost/spirit/home/x3/operator/kleene.hpp",
        "include/boost/spirit/home/x3/operator/list.hpp",
        "include/boost/spirit/home/x3/operator/not_predicate.hpp",
        "include/boost/spirit/home/x3/operator/optional.hpp",
        "include/boost/spirit/home/x3/operator/plus.hpp",
        "include/boost/spirit/home/x3/operator/sequence.hpp",
        "include/boost/spirit/home/x3/string.hpp",
        "include/boost/spirit/home/x3/string/detail/no_case_string_parse.hpp",
        "include/boost/spirit/home/x3/string/detail/string_parse.hpp",
        "include/boost/spirit/home/x3/string/detail/tst.hpp",
        "include/boost/spirit/home/x3/string/literal_string.hpp",
        "include/boost/spirit/home/x3/string/symbols.hpp",
        "include/boost/spirit/home/x3/string/tst.hpp",
        "include/boost/spirit/home/x3/string/tst_map.hpp",
        "include/boost/spirit/home/x3/support/ast/position_tagged.hpp",
        "include/boost/spirit/home/x3/support/ast/variant.hpp",
        "include/boost/spirit/home/x3/support/context.hpp",
        "include/boost/spirit/home/x3/support/no_case.hpp",
        "include/boost/spirit/home/x3/support/numeric_utils/detail/extract_int.hpp",
        "include/boost/spirit/home/x3/support/numeric_utils/extract_int.hpp",
        "include/boost/spirit/home/x3/support/numeric_utils/extract_real.hpp",
        "include/boost/spirit/home/x3/support/numeric_utils/pow10.hpp",
        "include/boost/spirit/home/x3/support/numeric_utils/sign.hpp",
        "include/boost/spirit/home/x3/support/subcontext.hpp",
        "include/boost/spirit/home/x3/support/traits/attribute_category.hpp",
        "include/boost/spirit/home/x3/support/traits/attribute_of.hpp",
        "include/boost/spirit/home/x3/support/traits/attribute_type.hpp",
        "include/boost/spirit/home/x3/support/traits/container_traits.hpp",
        "include/boost/spirit/home/x3/support/traits/handles_container.hpp",
        "include/boost/spirit/home/x3/support/traits/has_attribute.hpp",
        "include/boost/spirit/home/x3/support/traits/is_parser.hpp",
        "include/boost/spirit/home/x3/support/traits/is_range.hpp",
        "include/boost/spirit/home/x3/support/traits/is_substitute.hpp",
        "include/boost/spirit/home/x3/support/traits/is_variant.hpp",
        "include/boost/spirit/home/x3/support/traits/make_attribute.hpp",
        "include/boost/spirit/home/x3/support/traits/move_to.hpp",
        "include/boost/spirit/home/x3/support/traits/numeric_traits.hpp",
        "include/boost/spirit/home/x3/support/traits/optional_traits.hpp",
        "include/boost/spirit/home/x3/support/traits/print_attribute.hpp",
        "include/boost/spirit/home/x3/support/traits/print_token.hpp",
        "include/boost/spirit/home/x3/support/traits/string_traits.hpp",
        "include/boost/spirit/home/x3/support/traits/transform_attribute.hpp",
        "include/boost/spirit/home/x3/support/traits/tuple_traits.hpp",
        "include/boost/spirit/home/x3/support/traits/value_traits.hpp",
        "include/boost/spirit/home/x3/support/traits/variant_find_substitute.hpp",
        "include/boost/spirit/home/x3/support/traits/variant_has_substitute.hpp",
        "include/boost/spirit/home/x3/support/unused.hpp",
        "include/boost/spirit/home/x3/support/utility/annotate_on_success.hpp",
        "include/boost/spirit/home/x3/support/utility/error_reporting.hpp",
        "include/boost/spirit/home/x3/support/utility/is_callable.hpp",
        "include/boost/spirit/home/x3/support/utility/lambda_visitor.hpp",
        "include/boost/spirit/home/x3/support/utility/sfinae.hpp",
        "include/boost/spirit/home/x3/support/utility/testing.hpp",
        "include/boost/spirit/home/x3/support/utility/unrefcv.hpp",
        "include/boost/spirit/home/x3/support/utility/utf8.hpp",
        "include/boost/spirit/home/x3/version.hpp",
        "include/boost/spirit/include/classic.hpp",
        "include/boost/spirit/include/classic_actions.hpp",
        "include/boost/spirit/include/classic_actor.hpp",
        "include/boost/spirit/include/classic_alternative.hpp",
        "include/boost/spirit/include/classic_as_parser.hpp",
        "include/boost/spirit/include/classic_assert.hpp",
        "include/boost/spirit/include/classic_assign_actor.hpp",
        "include/boost/spirit/include/classic_assign_key_actor.hpp",
        "include/boost/spirit/include/classic_ast.hpp",
        "include/boost/spirit/include/classic_ast_fwd.hpp",
        "include/boost/spirit/include/classic_attribute.hpp",
        "include/boost/spirit/include/classic_basic_chset.hpp",
        "include/boost/spirit/include/classic_chset.hpp",
        "include/boost/spirit/include/classic_chset_operators.hpp",
        "include/boost/spirit/include/classic_clear_actor.hpp",
        "include/boost/spirit/include/classic_closure.hpp",
        "include/boost/spirit/include/classic_closure_context.hpp",
        "include/boost/spirit/include/classic_closure_fwd.hpp",
        "include/boost/spirit/include/classic_common.hpp",
        "include/boost/spirit/include/classic_common_fwd.hpp",
        "include/boost/spirit/include/classic_composite.hpp",
        "include/boost/spirit/include/classic_config.hpp",
        "include/boost/spirit/include/classic_confix.hpp",
        "include/boost/spirit/include/classic_confix_fwd.hpp",
        "include/boost/spirit/include/classic_core.hpp",
        "include/boost/spirit/include/classic_debug.hpp",
        "include/boost/spirit/include/classic_debug_node.hpp",
        "include/boost/spirit/include/classic_decrement_actor.hpp",
        "include/boost/spirit/include/classic_difference.hpp",
        "include/boost/spirit/include/classic_directives.hpp",
        "include/boost/spirit/include/classic_distinct.hpp",
        "include/boost/spirit/include/classic_distinct_fwd.hpp",
        "include/boost/spirit/include/classic_dynamic.hpp",
        "include/boost/spirit/include/classic_epsilon.hpp",
        "include/boost/spirit/include/classic_erase_actor.hpp",
        "include/boost/spirit/include/classic_error_handling.hpp",
        "include/boost/spirit/include/classic_escape_char.hpp",
        "include/boost/spirit/include/classic_escape_char_fwd.hpp",
        "include/boost/spirit/include/classic_exceptions.hpp",
        "include/boost/spirit/include/classic_exceptions_fwd.hpp",
        "include/boost/spirit/include/classic_exclusive_or.hpp",
        "include/boost/spirit/include/classic_file_iterator.hpp",
        "include/boost/spirit/include/classic_file_iterator_fwd.hpp",
        "include/boost/spirit/include/classic_fixed_size_queue.hpp",
        "include/boost/spirit/include/classic_flush_multi_pass.hpp",
        "include/boost/spirit/include/classic_for.hpp",
        "include/boost/spirit/include/classic_functor_parser.hpp",
        "include/boost/spirit/include/classic_fundamental.hpp",
        "include/boost/spirit/include/classic_grammar.hpp",
        "include/boost/spirit/include/classic_grammar_def.hpp",
        "include/boost/spirit/include/classic_grammar_def_fwd.hpp",
        "include/boost/spirit/include/classic_if.hpp",
        "include/boost/spirit/include/classic_increment_actor.hpp",
        "include/boost/spirit/include/classic_insert_at_actor.hpp",
        "include/boost/spirit/include/classic_insert_key_actor.hpp",
        "include/boost/spirit/include/classic_intersection.hpp",
        "include/boost/spirit/include/classic_iterator.hpp",
        "include/boost/spirit/include/classic_kleene_star.hpp",
        "include/boost/spirit/include/classic_lazy.hpp",
        "include/boost/spirit/include/classic_list.hpp",
        "include/boost/spirit/include/classic_lists.hpp",
        "include/boost/spirit/include/classic_lists_fwd.hpp",
        "include/boost/spirit/include/classic_loops.hpp",
        "include/boost/spirit/include/classic_match.hpp",
        "include/boost/spirit/include/classic_meta.hpp",
        "include/boost/spirit/include/classic_minimal.hpp",
        "include/boost/spirit/include/classic_multi_pass.hpp",
        "include/boost/spirit/include/classic_multi_pass_fwd.hpp",
        "include/boost/spirit/include/classic_nil.hpp",
        "include/boost/spirit/include/classic_no_actions.hpp",
        "include/boost/spirit/include/classic_numerics.hpp",
        "include/boost/spirit/include/classic_numerics_fwd.hpp",
        "include/boost/spirit/include/classic_operators.hpp",
        "include/boost/spirit/include/classic_optional.hpp",
        "include/boost/spirit/include/classic_parametric.hpp",
        "include/boost/spirit/include/classic_parse_tree.hpp",
        "include/boost/spirit/include/classic_parse_tree_fwd.hpp",
        "include/boost/spirit/include/classic_parse_tree_utils.hpp",
        "include/boost/spirit/include/classic_parser.hpp",
        "include/boost/spirit/include/classic_parser_context.hpp",
        "include/boost/spirit/include/classic_parser_id.hpp",
        "include/boost/spirit/include/classic_parser_names.hpp",
        "include/boost/spirit/include/classic_parser_traits.hpp",
        "include/boost/spirit/include/classic_position_iterator.hpp",
        "include/boost/spirit/include/classic_position_iterator_fwd.hpp",
        "include/boost/spirit/include/classic_positive.hpp",
        "include/boost/spirit/include/classic_primitives.hpp",
        "include/boost/spirit/include/classic_push_back_actor.hpp",
        "include/boost/spirit/include/classic_push_front_actor.hpp",
        "include/boost/spirit/include/classic_range_run.hpp",
        "include/boost/spirit/include/classic_ref_actor.hpp",
        "include/boost/spirit/include/classic_ref_const_ref_actor.hpp",
        "include/boost/spirit/include/classic_ref_const_ref_const_ref_a.hpp",
        "include/boost/spirit/include/classic_ref_const_ref_value_actor.hpp",
        "include/boost/spirit/include/classic_ref_value_actor.hpp",
        "include/boost/spirit/include/classic_refactoring.hpp",
        "include/boost/spirit/include/classic_regex.hpp",
        "include/boost/spirit/include/classic_rule.hpp",
        "include/boost/spirit/include/classic_rule_alias.hpp",
        "include/boost/spirit/include/classic_rule_parser.hpp",
        "include/boost/spirit/include/classic_safe_bool.hpp",
        "include/boost/spirit/include/classic_scanner.hpp",
        "include/boost/spirit/include/classic_scanner_fwd.hpp",
        "include/boost/spirit/include/classic_scoped_lock.hpp",
        "include/boost/spirit/include/classic_select.hpp",
        "include/boost/spirit/include/classic_sequence.hpp",
        "include/boost/spirit/include/classic_sequential_and.hpp",
        "include/boost/spirit/include/classic_sequential_or.hpp",
        "include/boost/spirit/include/classic_skipper.hpp",
        "include/boost/spirit/include/classic_skipper_fwd.hpp",
        "include/boost/spirit/include/classic_spirit.hpp",
        "include/boost/spirit/include/classic_static.hpp",
        "include/boost/spirit/include/classic_stored_rule.hpp",
        "include/boost/spirit/include/classic_stored_rule_fwd.hpp",
        "include/boost/spirit/include/classic_subrule.hpp",
        "include/boost/spirit/include/classic_subrule_fwd.hpp",
        "include/boost/spirit/include/classic_swap_actor.hpp",
        "include/boost/spirit/include/classic_switch.hpp",
        "include/boost/spirit/include/classic_symbols.hpp",
        "include/boost/spirit/include/classic_symbols_fwd.hpp",
        "include/boost/spirit/include/classic_traverse.hpp",
        "include/boost/spirit/include/classic_tree_to_xml.hpp",
        "include/boost/spirit/include/classic_typeof.hpp",
        "include/boost/spirit/include/classic_utility.hpp",
        "include/boost/spirit/include/classic_version.hpp",
        "include/boost/spirit/include/classic_while.hpp",
        "include/boost/spirit/include/karma.hpp",
        "include/boost/spirit/include/karma_action.hpp",
        "include/boost/spirit/include/karma_alternative.hpp",
        "include/boost/spirit/include/karma_and_predicate.hpp",
        "include/boost/spirit/include/karma_as.hpp",
        "include/boost/spirit/include/karma_attr_cast.hpp",
        "include/boost/spirit/include/karma_auto.hpp",
        "include/boost/spirit/include/karma_auxiliary.hpp",
        "include/boost/spirit/include/karma_binary.hpp",
        "include/boost/spirit/include/karma_bool.hpp",
        "include/boost/spirit/include/karma_buffer.hpp",
        "include/boost/spirit/include/karma_center_alignment.hpp",
        "include/boost/spirit/include/karma_char.hpp",
        "include/boost/spirit/include/karma_char_.hpp",
        "include/boost/spirit/include/karma_char_class.hpp",
        "include/boost/spirit/include/karma_columns.hpp",
        "include/boost/spirit/include/karma_delimit.hpp",
        "include/boost/spirit/include/karma_directive.hpp",
        "include/boost/spirit/include/karma_domain.hpp",
        "include/boost/spirit/include/karma_duplicate.hpp",
        "include/boost/spirit/include/karma_eol.hpp",
        "include/boost/spirit/include/karma_eps.hpp",
        "include/boost/spirit/include/karma_format.hpp",
        "include/boost/spirit/include/karma_format_attr.hpp",
        "include/boost/spirit/include/karma_format_auto.hpp",
        "include/boost/spirit/include/karma_generate.hpp",
        "include/boost/spirit/include/karma_generate_attr.hpp",
        "include/boost/spirit/include/karma_generate_auto.hpp",
        "include/boost/spirit/include/karma_grammar.hpp",
        "include/boost/spirit/include/karma_int.hpp",
        "include/boost/spirit/include/karma_kleene.hpp",
        "include/boost/spirit/include/karma_lazy.hpp",
        "include/boost/spirit/include/karma_left_alignment.hpp",
        "include/boost/spirit/include/karma_list.hpp",
        "include/boost/spirit/include/karma_maxwidth.hpp",
        "include/boost/spirit/include/karma_no_delimit.hpp",
        "include/boost/spirit/include/karma_nonterminal.hpp",
        "include/boost/spirit/include/karma_not_predicate.hpp",
        "include/boost/spirit/include/karma_numeric.hpp",
        "include/boost/spirit/include/karma_omit.hpp",
        "include/boost/spirit/include/karma_operator.hpp",
        "include/boost/spirit/include/karma_optional.hpp",
        "include/boost/spirit/include/karma_phoenix_attributes.hpp",
        "include/boost/spirit/include/karma_plus.hpp",
        "include/boost/spirit/include/karma_real.hpp",
        "include/boost/spirit/include/karma_repeat.hpp",
        "include/boost/spirit/include/karma_right_alignment.hpp",
        "include/boost/spirit/include/karma_rule.hpp",
        "include/boost/spirit/include/karma_sequence.hpp",
        "include/boost/spirit/include/karma_stream.hpp",
        "include/boost/spirit/include/karma_strict_relaxed.hpp",
        "include/boost/spirit/include/karma_string.hpp",
        "include/boost/spirit/include/karma_symbols.hpp",
        "include/boost/spirit/include/karma_uint.hpp",
        "include/boost/spirit/include/karma_upper_lower_case.hpp",
        "include/boost/spirit/include/karma_verbatim.hpp",
        "include/boost/spirit/include/karma_what.hpp",
        "include/boost/spirit/include/lex.hpp",
        "include/boost/spirit/include/lex_char_token_def.hpp",
        "include/boost/spirit/include/lex_domain.hpp",
        "include/boost/spirit/include/lex_generate_static_lexertl.hpp",
        "include/boost/spirit/include/lex_lexer.hpp",
        "include/boost/spirit/include/lex_lexertl.hpp",
        "include/boost/spirit/include/lex_lexertl_position_token.hpp",
        "include/boost/spirit/include/lex_lexertl_token.hpp",
        "include/boost/spirit/include/lex_plain_token.hpp",
        "include/boost/spirit/include/lex_primitives.hpp",
        "include/boost/spirit/include/lex_static_lexertl.hpp",
        "include/boost/spirit/include/lex_tokenize_and_parse.hpp",
        "include/boost/spirit/include/lex_tokenize_and_parse_attr.hpp",
        "include/boost/spirit/include/phoenix.hpp",
        "include/boost/spirit/include/phoenix1.hpp",
        "include/boost/spirit/include/phoenix1_actor.hpp",
        "include/boost/spirit/include/phoenix1_binders.hpp",
        "include/boost/spirit/include/phoenix1_casts.hpp",
        "include/boost/spirit/include/phoenix1_closures.hpp",
        "include/boost/spirit/include/phoenix1_composite.hpp",
        "include/boost/spirit/include/phoenix1_functions.hpp",
        "include/boost/spirit/include/phoenix1_new.hpp",
        "include/boost/spirit/include/phoenix1_operators.hpp",
        "include/boost/spirit/include/phoenix1_primitives.hpp",
        "include/boost/spirit/include/phoenix1_special_ops.hpp",
        "include/boost/spirit/include/phoenix1_statements.hpp",
        "include/boost/spirit/include/phoenix1_tuple_helpers.hpp",
        "include/boost/spirit/include/phoenix1_tuples.hpp",
        "include/boost/spirit/include/phoenix_algorithm.hpp",
        "include/boost/spirit/include/phoenix_bind.hpp",
        "include/boost/spirit/include/phoenix_container.hpp",
        "include/boost/spirit/include/phoenix_core.hpp",
        "include/boost/spirit/include/phoenix_function.hpp",
        "include/boost/spirit/include/phoenix_fusion.hpp",
        "include/boost/spirit/include/phoenix_limits.hpp",
        "include/boost/spirit/include/phoenix_object.hpp",
        "include/boost/spirit/include/phoenix_operator.hpp",
        "include/boost/spirit/include/phoenix_scope.hpp",
        "include/boost/spirit/include/phoenix_statement.hpp",
        "include/boost/spirit/include/phoenix_stl.hpp",
        "include/boost/spirit/include/phoenix_version.hpp",
        "include/boost/spirit/include/qi.hpp",
        "include/boost/spirit/include/qi_action.hpp",
        "include/boost/spirit/include/qi_alternative.hpp",
        "include/boost/spirit/include/qi_and_predicate.hpp",
        "include/boost/spirit/include/qi_as.hpp",
        "include/boost/spirit/include/qi_as_string.hpp",
        "include/boost/spirit/include/qi_attr.hpp",
        "include/boost/spirit/include/qi_attr_cast.hpp",
        "include/boost/spirit/include/qi_auto.hpp",
        "include/boost/spirit/include/qi_auxiliary.hpp",
        "include/boost/spirit/include/qi_binary.hpp",
        "include/boost/spirit/include/qi_bool.hpp",
        "include/boost/spirit/include/qi_char.hpp",
        "include/boost/spirit/include/qi_char_.hpp",
        "include/boost/spirit/include/qi_char_class.hpp",
        "include/boost/spirit/include/qi_copy.hpp",
        "include/boost/spirit/include/qi_core.hpp",
        "include/boost/spirit/include/qi_difference.hpp",
        "include/boost/spirit/include/qi_directive.hpp",
        "include/boost/spirit/include/qi_domain.hpp",
        "include/boost/spirit/include/qi_eoi.hpp",
        "include/boost/spirit/include/qi_eol.hpp",
        "include/boost/spirit/include/qi_eps.hpp",
        "include/boost/spirit/include/qi_expect.hpp",
        "include/boost/spirit/include/qi_grammar.hpp",
        "include/boost/spirit/include/qi_hold.hpp",
        "include/boost/spirit/include/qi_int.hpp",
        "include/boost/spirit/include/qi_kleene.hpp",
        "include/boost/spirit/include/qi_lazy.hpp",
        "include/boost/spirit/include/qi_lexeme.hpp",
        "include/boost/spirit/include/qi_list.hpp",
        "include/boost/spirit/include/qi_lit.hpp",
        "include/boost/spirit/include/qi_match.hpp",
        "include/boost/spirit/include/qi_match_attr.hpp",
        "include/boost/spirit/include/qi_match_auto.hpp",
        "include/boost/spirit/include/qi_matches.hpp",
        "include/boost/spirit/include/qi_no_case.hpp",
        "include/boost/spirit/include/qi_no_skip.hpp",
        "include/boost/spirit/include/qi_nonterminal.hpp",
        "include/boost/spirit/include/qi_not_predicate.hpp",
        "include/boost/spirit/include/qi_numeric.hpp",
        "include/boost/spirit/include/qi_omit.hpp",
        "include/boost/spirit/include/qi_operator.hpp",
        "include/boost/spirit/include/qi_optional.hpp",
        "include/boost/spirit/include/qi_parse.hpp",
        "include/boost/spirit/include/qi_parse_attr.hpp",
        "include/boost/spirit/include/qi_parse_auto.hpp",
        "include/boost/spirit/include/qi_permutation.hpp",
        "include/boost/spirit/include/qi_plus.hpp",
        "include/boost/spirit/include/qi_raw.hpp",
        "include/boost/spirit/include/qi_real.hpp",
        "include/boost/spirit/include/qi_repeat.hpp",
        "include/boost/spirit/include/qi_rule.hpp",
        "include/boost/spirit/include/qi_sequence.hpp",
        "include/boost/spirit/include/qi_sequential_or.hpp",
        "include/boost/spirit/include/qi_skip.hpp",
        "include/boost/spirit/include/qi_stream.hpp",
        "include/boost/spirit/include/qi_string.hpp",
        "include/boost/spirit/include/qi_symbols.hpp",
        "include/boost/spirit/include/qi_uint.hpp",
        "include/boost/spirit/include/qi_what.hpp",
        "include/boost/spirit/include/support.hpp",
        "include/boost/spirit/include/support_adapt_adt_attributes.hpp",
        "include/boost/spirit/include/support_any.hpp",
        "include/boost/spirit/include/support_any_if.hpp",
        "include/boost/spirit/include/support_any_if_ns.hpp",
        "include/boost/spirit/include/support_any_if_ns_so.hpp",
        "include/boost/spirit/include/support_any_ns.hpp",
        "include/boost/spirit/include/support_any_ns_so.hpp",
        "include/boost/spirit/include/support_argument.hpp",
        "include/boost/spirit/include/support_ascii.hpp",
        "include/boost/spirit/include/support_attributes.hpp",
        "include/boost/spirit/include/support_attributes_fwd.hpp",
        "include/boost/spirit/include/support_auto.hpp",
        "include/boost/spirit/include/support_char_class.hpp",
        "include/boost/spirit/include/support_container.hpp",
        "include/boost/spirit/include/support_extended_variant.hpp",
        "include/boost/spirit/include/support_info.hpp",
        "include/boost/spirit/include/support_iso8859_1.hpp",
        "include/boost/spirit/include/support_istream_iterator.hpp",
        "include/boost/spirit/include/support_line_pos_iterator.hpp",
        "include/boost/spirit/include/support_locals.hpp",
        "include/boost/spirit/include/support_look_ahead.hpp",
        "include/boost/spirit/include/support_modify.hpp",
        "include/boost/spirit/include/support_multi_pass.hpp",
        "include/boost/spirit/include/support_multi_pass_fwd.hpp",
        "include/boost/spirit/include/support_ostream_iterator.hpp",
        "include/boost/spirit/include/support_standard.hpp",
        "include/boost/spirit/include/support_standard_wide.hpp",
        "include/boost/spirit/include/support_string_traits.hpp",
        "include/boost/spirit/include/support_unused.hpp",
        "include/boost/spirit/include/support_utree.hpp",
        "include/boost/spirit/include/version.hpp",
        "include/boost/spirit/repository/home/karma.hpp",
        "include/boost/spirit/repository/home/karma/directive.hpp",
        "include/boost/spirit/repository/home/karma/directive/confix.hpp",
        "include/boost/spirit/repository/home/karma/nonterminal.hpp",
        "include/boost/spirit/repository/home/karma/nonterminal/subrule.hpp",
        "include/boost/spirit/repository/home/qi.hpp",
        "include/boost/spirit/repository/home/qi/directive.hpp",
        "include/boost/spirit/repository/home/qi/directive/confix.hpp",
        "include/boost/spirit/repository/home/qi/directive/distinct.hpp",
        "include/boost/spirit/repository/home/qi/directive/kwd.hpp",
        "include/boost/spirit/repository/home/qi/directive/seek.hpp",
        "include/boost/spirit/repository/home/qi/nonterminal.hpp",
        "include/boost/spirit/repository/home/qi/nonterminal/subrule.hpp",
        "include/boost/spirit/repository/home/qi/operator.hpp",
        "include/boost/spirit/repository/home/qi/operator/detail/keywords.hpp",
        "include/boost/spirit/repository/home/qi/operator/keywords.hpp",
        "include/boost/spirit/repository/home/qi/primitive.hpp",
        "include/boost/spirit/repository/home/qi/primitive/advance.hpp",
        "include/boost/spirit/repository/home/qi/primitive/flush_multi_pass.hpp",
        "include/boost/spirit/repository/home/qi/primitive/iter_pos.hpp",
        "include/boost/spirit/repository/home/support/confix.hpp",
        "include/boost/spirit/repository/home/support/distinct.hpp",
        "include/boost/spirit/repository/home/support/flush_multi_pass.hpp",
        "include/boost/spirit/repository/home/support/kwd.hpp",
        "include/boost/spirit/repository/home/support/seek.hpp",
        "include/boost/spirit/repository/home/support/subrule_context.hpp",
        "include/boost/spirit/repository/include/karma.hpp",
        "include/boost/spirit/repository/include/karma_confix.hpp",
        "include/boost/spirit/repository/include/karma_directive.hpp",
        "include/boost/spirit/repository/include/karma_nonterminal.hpp",
        "include/boost/spirit/repository/include/karma_subrule.hpp",
        "include/boost/spirit/repository/include/qi.hpp",
        "include/boost/spirit/repository/include/qi_advance.hpp",
        "include/boost/spirit/repository/include/qi_confix.hpp",
        "include/boost/spirit/repository/include/qi_directive.hpp",
        "include/boost/spirit/repository/include/qi_distinct.hpp",
        "include/boost/spirit/repository/include/qi_flush_multi_pass.hpp",
        "include/boost/spirit/repository/include/qi_iter_pos.hpp",
        "include/boost/spirit/repository/include/qi_keywords.hpp",
        "include/boost/spirit/repository/include/qi_kwd.hpp",
        "include/boost/spirit/repository/include/qi_nonterminal.hpp",
        "include/boost/spirit/repository/include/qi_primitive.hpp",
        "include/boost/spirit/repository/include/qi_seek.hpp",
        "include/boost/spirit/repository/include/qi_subrule.hpp",
        "include/boost/spirit/version.hpp",
    ],
    includes = [
        "include",
        "include/boost/spirit/include",
        "include/boost/spirit/repository/include",
    ],
)

cc_library(
    name = "spirit",
    srcs = [],
    hdrs = [
        "include/boost/spirit.hpp",
        "include/boost/spirit/home/classic.hpp",
        "include/boost/spirit/home/classic/actor.hpp",
        "include/boost/spirit/home/classic/actor/assign_actor.hpp",
        "include/boost/spirit/home/classic/actor/assign_key_actor.hpp",
        "include/boost/spirit/home/classic/actor/clear_actor.hpp",
        "include/boost/spirit/home/classic/actor/decrement_actor.hpp",
        "include/boost/spirit/home/classic/actor/erase_actor.hpp",
        "include/boost/spirit/home/classic/actor/increment_actor.hpp",
        "include/boost/spirit/home/classic/actor/insert_at_actor.hpp",
        "include/boost/spirit/home/classic/actor/insert_key_actor.hpp",
        "include/boost/spirit/home/classic/actor/push_back_actor.hpp",
        "include/boost/spirit/home/classic/actor/push_front_actor.hpp",
        "include/boost/spirit/home/classic/actor/ref_actor.hpp",
        "include/boost/spirit/home/classic/actor/ref_const_ref_actor.hpp",
        "include/boost/spirit/home/classic/actor/ref_const_ref_const_ref_a.hpp",
        "include/boost/spirit/home/classic/actor/ref_const_ref_value_actor.hpp",
        "include/boost/spirit/home/classic/actor/ref_value_actor.hpp",
        "include/boost/spirit/home/classic/actor/swap_actor.hpp",
        "include/boost/spirit/home/classic/actor/typeof.hpp",
        "include/boost/spirit/home/classic/attribute.hpp",
        "include/boost/spirit/home/classic/attribute/closure.hpp",
        "include/boost/spirit/home/classic/attribute/closure_context.hpp",
        "include/boost/spirit/home/classic/attribute/closure_fwd.hpp",
        "include/boost/spirit/home/classic/attribute/parametric.hpp",
        "include/boost/spirit/home/classic/attribute/typeof.hpp",
        "include/boost/spirit/home/classic/core.hpp",
        "include/boost/spirit/home/classic/core/assert.hpp",
        "include/boost/spirit/home/classic/core/composite/actions.hpp",
        "include/boost/spirit/home/classic/core/composite/alternative.hpp",
        "include/boost/spirit/home/classic/core/composite/composite.hpp",
        "include/boost/spirit/home/classic/core/composite/difference.hpp",
        "include/boost/spirit/home/classic/core/composite/directives.hpp",
        "include/boost/spirit/home/classic/core/composite/epsilon.hpp",
        "include/boost/spirit/home/classic/core/composite/exclusive_or.hpp",
        "include/boost/spirit/home/classic/core/composite/impl/alternative.ipp",
        "include/boost/spirit/home/classic/core/composite/impl/difference.ipp",
        "include/boost/spirit/home/classic/core/composite/impl/directives.ipp",
        "include/boost/spirit/home/classic/core/composite/impl/exclusive_or.ipp",
        "include/boost/spirit/home/classic/core/composite/impl/intersection.ipp",
        "include/boost/spirit/home/classic/core/composite/impl/kleene_star.ipp",
        "include/boost/spirit/home/classic/core/composite/impl/list.ipp",
        "include/boost/spirit/home/classic/core/composite/impl/optional.ipp",
        "include/boost/spirit/home/classic/core/composite/impl/positive.ipp",
        "include/boost/spirit/home/classic/core/composite/impl/sequence.ipp",
        "include/boost/spirit/home/classic/core/composite/impl/sequential_and.ipp",
        "include/boost/spirit/home/classic/core/composite/impl/sequential_or.ipp",
        "include/boost/spirit/home/classic/core/composite/intersection.hpp",
        "include/boost/spirit/home/classic/core/composite/kleene_star.hpp",
        "include/boost/spirit/home/classic/core/composite/list.hpp",
        "include/boost/spirit/home/classic/core/composite/no_actions.hpp",
        "include/boost/spirit/home/classic/core/composite/operators.hpp",
        "include/boost/spirit/home/classic/core/composite/optional.hpp",
        "include/boost/spirit/home/classic/core/composite/positive.hpp",
        "include/boost/spirit/home/classic/core/composite/sequence.hpp",
        "include/boost/spirit/home/classic/core/composite/sequential_and.hpp",
        "include/boost/spirit/home/classic/core/composite/sequential_or.hpp",
        "include/boost/spirit/home/classic/core/config.hpp",
        "include/boost/spirit/home/classic/core/impl/match.ipp",
        "include/boost/spirit/home/classic/core/impl/match_attr_traits.ipp",
        "include/boost/spirit/home/classic/core/impl/parser.ipp",
        "include/boost/spirit/home/classic/core/match.hpp",
        "include/boost/spirit/home/classic/core/nil.hpp",
        "include/boost/spirit/home/classic/core/non_terminal/grammar.hpp",
        "include/boost/spirit/home/classic/core/non_terminal/impl/grammar.ipp",
        "include/boost/spirit/home/classic/core/non_terminal/impl/object_with_id.ipp",
        "include/boost/spirit/home/classic/core/non_terminal/impl/rule.ipp",
        "include/boost/spirit/home/classic/core/non_terminal/impl/static.hpp",
        "include/boost/spirit/home/classic/core/non_terminal/impl/subrule.ipp",
        "include/boost/spirit/home/classic/core/non_terminal/parser_context.hpp",
        "include/boost/spirit/home/classic/core/non_terminal/parser_id.hpp",
        "include/boost/spirit/home/classic/core/non_terminal/rule.hpp",
        "include/boost/spirit/home/classic/core/non_terminal/subrule.hpp",
        "include/boost/spirit/home/classic/core/non_terminal/subrule_fwd.hpp",
        "include/boost/spirit/home/classic/core/parser.hpp",
        "include/boost/spirit/home/classic/core/primitives/impl/numerics.ipp",
        "include/boost/spirit/home/classic/core/primitives/impl/primitives.ipp",
        "include/boost/spirit/home/classic/core/primitives/numerics.hpp",
        "include/boost/spirit/home/classic/core/primitives/numerics_fwd.hpp",
        "include/boost/spirit/home/classic/core/primitives/primitives.hpp",
        "include/boost/spirit/home/classic/core/safe_bool.hpp",
        "include/boost/spirit/home/classic/core/scanner/impl/skipper.ipp",
        "include/boost/spirit/home/classic/core/scanner/scanner.hpp",
        "include/boost/spirit/home/classic/core/scanner/scanner_fwd.hpp",
        "include/boost/spirit/home/classic/core/scanner/skipper.hpp",
        "include/boost/spirit/home/classic/core/scanner/skipper_fwd.hpp",
        "include/boost/spirit/home/classic/core/typeof.hpp",
        "include/boost/spirit/home/classic/debug.hpp",
        "include/boost/spirit/home/classic/debug/debug_node.hpp",
        "include/boost/spirit/home/classic/debug/impl/parser_names.ipp",
        "include/boost/spirit/home/classic/debug/minimal.hpp",
        "include/boost/spirit/home/classic/debug/parser_names.hpp",
        "include/boost/spirit/home/classic/debug/typeof.hpp",
        "include/boost/spirit/home/classic/dynamic.hpp",
        "include/boost/spirit/home/classic/dynamic/for.hpp",
        "include/boost/spirit/home/classic/dynamic/if.hpp",
        "include/boost/spirit/home/classic/dynamic/impl/conditions.ipp",
        "include/boost/spirit/home/classic/dynamic/impl/select.ipp",
        "include/boost/spirit/home/classic/dynamic/impl/switch.ipp",
        "include/boost/spirit/home/classic/dynamic/lazy.hpp",
        "include/boost/spirit/home/classic/dynamic/rule_alias.hpp",
        "include/boost/spirit/home/classic/dynamic/select.hpp",
        "include/boost/spirit/home/classic/dynamic/stored_rule.hpp",
        "include/boost/spirit/home/classic/dynamic/stored_rule_fwd.hpp",
        "include/boost/spirit/home/classic/dynamic/switch.hpp",
        "include/boost/spirit/home/classic/dynamic/typeof.hpp",
        "include/boost/spirit/home/classic/dynamic/while.hpp",
        "include/boost/spirit/home/classic/error_handling.hpp",
        "include/boost/spirit/home/classic/error_handling/exceptions.hpp",
        "include/boost/spirit/home/classic/error_handling/exceptions_fwd.hpp",
        "include/boost/spirit/home/classic/error_handling/impl/exceptions.ipp",
        "include/boost/spirit/home/classic/error_handling/typeof.hpp",
        "include/boost/spirit/home/classic/iterator.hpp",
        "include/boost/spirit/home/classic/iterator/file_iterator.hpp",
        "include/boost/spirit/home/classic/iterator/file_iterator_fwd.hpp",
        "include/boost/spirit/home/classic/iterator/fixed_size_queue.hpp",
        "include/boost/spirit/home/classic/iterator/impl/file_iterator.ipp",
        "include/boost/spirit/home/classic/iterator/impl/position_iterator.ipp",
        "include/boost/spirit/home/classic/iterator/multi_pass.hpp",
        "include/boost/spirit/home/classic/iterator/multi_pass_fwd.hpp",
        "include/boost/spirit/home/classic/iterator/position_iterator.hpp",
        "include/boost/spirit/home/classic/iterator/position_iterator_fwd.hpp",
        "include/boost/spirit/home/classic/iterator/typeof.hpp",
        "include/boost/spirit/home/classic/meta.hpp",
        "include/boost/spirit/home/classic/meta/as_parser.hpp",
        "include/boost/spirit/home/classic/meta/fundamental.hpp",
        "include/boost/spirit/home/classic/meta/impl/fundamental.ipp",
        "include/boost/spirit/home/classic/meta/impl/parser_traits.ipp",
        "include/boost/spirit/home/classic/meta/impl/refactoring.ipp",
        "include/boost/spirit/home/classic/meta/impl/traverse.ipp",
        "include/boost/spirit/home/classic/meta/parser_traits.hpp",
        "include/boost/spirit/home/classic/meta/refactoring.hpp",
        "include/boost/spirit/home/classic/meta/traverse.hpp",
        "include/boost/spirit/home/classic/namespace.hpp",
        "include/boost/spirit/home/classic/phoenix.hpp",
        "include/boost/spirit/home/classic/phoenix/actor.hpp",
        "include/boost/spirit/home/classic/phoenix/binders.hpp",
        "include/boost/spirit/home/classic/phoenix/casts.hpp",
        "include/boost/spirit/home/classic/phoenix/closures.hpp",
        "include/boost/spirit/home/classic/phoenix/composite.hpp",
        "include/boost/spirit/home/classic/phoenix/functions.hpp",
        "include/boost/spirit/home/classic/phoenix/new.hpp",
        "include/boost/spirit/home/classic/phoenix/operators.hpp",
        "include/boost/spirit/home/classic/phoenix/primitives.hpp",
        "include/boost/spirit/home/classic/phoenix/special_ops.hpp",
        "include/boost/spirit/home/classic/phoenix/statements.hpp",
        "include/boost/spirit/home/classic/phoenix/tuple_helpers.hpp",
        "include/boost/spirit/home/classic/phoenix/tuples.hpp",
        "include/boost/spirit/home/classic/symbols.hpp",
        "include/boost/spirit/home/classic/symbols/impl/symbols.ipp",
        "include/boost/spirit/home/classic/symbols/impl/tst.ipp",
        "include/boost/spirit/home/classic/symbols/symbols.hpp",
        "include/boost/spirit/home/classic/symbols/symbols_fwd.hpp",
        "include/boost/spirit/home/classic/symbols/typeof.hpp",
        "include/boost/spirit/home/classic/tree/ast.hpp",
        "include/boost/spirit/home/classic/tree/ast_fwd.hpp",
        "include/boost/spirit/home/classic/tree/common.hpp",
        "include/boost/spirit/home/classic/tree/common_fwd.hpp",
        "include/boost/spirit/home/classic/tree/impl/parse_tree_utils.ipp",
        "include/boost/spirit/home/classic/tree/impl/tree_to_xml.ipp",
        "include/boost/spirit/home/classic/tree/parse_tree.hpp",
        "include/boost/spirit/home/classic/tree/parse_tree_fwd.hpp",
        "include/boost/spirit/home/classic/tree/parse_tree_utils.hpp",
        "include/boost/spirit/home/classic/tree/tree_to_xml.hpp",
        "include/boost/spirit/home/classic/tree/typeof.hpp",
        "include/boost/spirit/home/classic/utility.hpp",
        "include/boost/spirit/home/classic/utility/chset.hpp",
        "include/boost/spirit/home/classic/utility/chset_operators.hpp",
        "include/boost/spirit/home/classic/utility/confix.hpp",
        "include/boost/spirit/home/classic/utility/confix_fwd.hpp",
        "include/boost/spirit/home/classic/utility/distinct.hpp",
        "include/boost/spirit/home/classic/utility/distinct_fwd.hpp",
        "include/boost/spirit/home/classic/utility/escape_char.hpp",
        "include/boost/spirit/home/classic/utility/escape_char_fwd.hpp",
        "include/boost/spirit/home/classic/utility/flush_multi_pass.hpp",
        "include/boost/spirit/home/classic/utility/functor_parser.hpp",
        "include/boost/spirit/home/classic/utility/grammar_def.hpp",
        "include/boost/spirit/home/classic/utility/grammar_def_fwd.hpp",
        "include/boost/spirit/home/classic/utility/impl/chset.ipp",
        "include/boost/spirit/home/classic/utility/impl/chset/basic_chset.hpp",
        "include/boost/spirit/home/classic/utility/impl/chset/basic_chset.ipp",
        "include/boost/spirit/home/classic/utility/impl/chset/range_run.hpp",
        "include/boost/spirit/home/classic/utility/impl/chset/range_run.ipp",
        "include/boost/spirit/home/classic/utility/impl/chset_operators.ipp",
        "include/boost/spirit/home/classic/utility/impl/confix.ipp",
        "include/boost/spirit/home/classic/utility/impl/escape_char.ipp",
        "include/boost/spirit/home/classic/utility/impl/lists.ipp",
        "include/boost/spirit/home/classic/utility/impl/regex.ipp",
        "include/boost/spirit/home/classic/utility/lists.hpp",
        "include/boost/spirit/home/classic/utility/lists_fwd.hpp",
        "include/boost/spirit/home/classic/utility/loops.hpp",
        "include/boost/spirit/home/classic/utility/regex.hpp",
        "include/boost/spirit/home/classic/utility/rule_parser.hpp",
        "include/boost/spirit/home/classic/utility/scoped_lock.hpp",
        "include/boost/spirit/home/classic/utility/typeof.hpp",
        "include/boost/spirit/home/classic/version.hpp",
        "include/boost/spirit/home/karma.hpp",
        "include/boost/spirit/home/karma/action.hpp",
        "include/boost/spirit/home/karma/action/action.hpp",
        "include/boost/spirit/home/karma/auto.hpp",
        "include/boost/spirit/home/karma/auto/auto.hpp",
        "include/boost/spirit/home/karma/auto/create_generator.hpp",
        "include/boost/spirit/home/karma/auto/meta_create.hpp",
        "include/boost/spirit/home/karma/auxiliary.hpp",
        "include/boost/spirit/home/karma/auxiliary/attr_cast.hpp",
        "include/boost/spirit/home/karma/auxiliary/eol.hpp",
        "include/boost/spirit/home/karma/auxiliary/eps.hpp",
        "include/boost/spirit/home/karma/auxiliary/lazy.hpp",
        "include/boost/spirit/home/karma/binary.hpp",
        "include/boost/spirit/home/karma/binary/binary.hpp",
        "include/boost/spirit/home/karma/binary/padding.hpp",
        "include/boost/spirit/home/karma/char.hpp",
        "include/boost/spirit/home/karma/char/char.hpp",
        "include/boost/spirit/home/karma/char/char_class.hpp",
        "include/boost/spirit/home/karma/char/char_generator.hpp",
        "include/boost/spirit/home/karma/delimit_flag.hpp",
        "include/boost/spirit/home/karma/delimit_out.hpp",
        "include/boost/spirit/home/karma/detail/alternative_function.hpp",
        "include/boost/spirit/home/karma/detail/as.hpp",
        "include/boost/spirit/home/karma/detail/attributes.hpp",
        "include/boost/spirit/home/karma/detail/default_width.hpp",
        "include/boost/spirit/home/karma/detail/enable_lit.hpp",
        "include/boost/spirit/home/karma/detail/extract_from.hpp",
        "include/boost/spirit/home/karma/detail/fail_function.hpp",
        "include/boost/spirit/home/karma/detail/generate.hpp",
        "include/boost/spirit/home/karma/detail/generate_auto.hpp",
        "include/boost/spirit/home/karma/detail/generate_to.hpp",
        "include/boost/spirit/home/karma/detail/get_casetag.hpp",
        "include/boost/spirit/home/karma/detail/get_stricttag.hpp",
        "include/boost/spirit/home/karma/detail/indirect_iterator.hpp",
        "include/boost/spirit/home/karma/detail/output_iterator.hpp",
        "include/boost/spirit/home/karma/detail/pass_container.hpp",
        "include/boost/spirit/home/karma/detail/string_compare.hpp",
        "include/boost/spirit/home/karma/detail/string_generate.hpp",
        "include/boost/spirit/home/karma/detail/unused_delimiter.hpp",
        "include/boost/spirit/home/karma/directive.hpp",
        "include/boost/spirit/home/karma/directive/as.hpp",
        "include/boost/spirit/home/karma/directive/buffer.hpp",
        "include/boost/spirit/home/karma/directive/center_alignment.hpp",
        "include/boost/spirit/home/karma/directive/columns.hpp",
        "include/boost/spirit/home/karma/directive/delimit.hpp",
        "include/boost/spirit/home/karma/directive/duplicate.hpp",
        "include/boost/spirit/home/karma/directive/encoding.hpp",
        "include/boost/spirit/home/karma/directive/left_alignment.hpp",
        "include/boost/spirit/home/karma/directive/maxwidth.hpp",
        "include/boost/spirit/home/karma/directive/no_delimit.hpp",
        "include/boost/spirit/home/karma/directive/omit.hpp",
        "include/boost/spirit/home/karma/directive/repeat.hpp",
        "include/boost/spirit/home/karma/directive/right_alignment.hpp",
        "include/boost/spirit/home/karma/directive/strict_relaxed.hpp",
        "include/boost/spirit/home/karma/directive/upper_lower_case.hpp",
        "include/boost/spirit/home/karma/directive/verbatim.hpp",
        "include/boost/spirit/home/karma/domain.hpp",
        "include/boost/spirit/home/karma/format.hpp",
        "include/boost/spirit/home/karma/format_auto.hpp",
        "include/boost/spirit/home/karma/generate.hpp",
        "include/boost/spirit/home/karma/generate_attr.hpp",
        "include/boost/spirit/home/karma/generator.hpp",
        "include/boost/spirit/home/karma/meta_compiler.hpp",
        "include/boost/spirit/home/karma/nonterminal.hpp",
        "include/boost/spirit/home/karma/nonterminal/debug_handler.hpp",
        "include/boost/spirit/home/karma/nonterminal/debug_handler_state.hpp",
        "include/boost/spirit/home/karma/nonterminal/detail/fcall.hpp",
        "include/boost/spirit/home/karma/nonterminal/detail/generator_binder.hpp",
        "include/boost/spirit/home/karma/nonterminal/detail/parameterized.hpp",
        "include/boost/spirit/home/karma/nonterminal/grammar.hpp",
        "include/boost/spirit/home/karma/nonterminal/nonterminal_fwd.hpp",
        "include/boost/spirit/home/karma/nonterminal/rule.hpp",
        "include/boost/spirit/home/karma/nonterminal/simple_trace.hpp",
        "include/boost/spirit/home/karma/numeric.hpp",
        "include/boost/spirit/home/karma/numeric/bool.hpp",
        "include/boost/spirit/home/karma/numeric/bool_policies.hpp",
        "include/boost/spirit/home/karma/numeric/detail/bool_utils.hpp",
        "include/boost/spirit/home/karma/numeric/detail/numeric_utils.hpp",
        "include/boost/spirit/home/karma/numeric/detail/real_utils.hpp",
        "include/boost/spirit/home/karma/numeric/int.hpp",
        "include/boost/spirit/home/karma/numeric/real.hpp",
        "include/boost/spirit/home/karma/numeric/real_policies.hpp",
        "include/boost/spirit/home/karma/numeric/uint.hpp",
        "include/boost/spirit/home/karma/operator.hpp",
        "include/boost/spirit/home/karma/operator/alternative.hpp",
        "include/boost/spirit/home/karma/operator/and_predicate.hpp",
        "include/boost/spirit/home/karma/operator/kleene.hpp",
        "include/boost/spirit/home/karma/operator/list.hpp",
        "include/boost/spirit/home/karma/operator/not_predicate.hpp",
        "include/boost/spirit/home/karma/operator/optional.hpp",
        "include/boost/spirit/home/karma/operator/plus.hpp",
        "include/boost/spirit/home/karma/operator/sequence.hpp",
        "include/boost/spirit/home/karma/phoenix_attributes.hpp",
        "include/boost/spirit/home/karma/reference.hpp",
        "include/boost/spirit/home/karma/stream.hpp",
        "include/boost/spirit/home/karma/stream/detail/format_manip.hpp",
        "include/boost/spirit/home/karma/stream/detail/format_manip_auto.hpp",
        "include/boost/spirit/home/karma/stream/detail/iterator_sink.hpp",
        "include/boost/spirit/home/karma/stream/format_manip.hpp",
        "include/boost/spirit/home/karma/stream/format_manip_attr.hpp",
        "include/boost/spirit/home/karma/stream/ostream_iterator.hpp",
        "include/boost/spirit/home/karma/stream/stream.hpp",
        "include/boost/spirit/home/karma/string.hpp",
        "include/boost/spirit/home/karma/string/lit.hpp",
        "include/boost/spirit/home/karma/string/symbols.hpp",
        "include/boost/spirit/home/karma/what.hpp",
        "include/boost/spirit/home/lex.hpp",
        "include/boost/spirit/home/lex/argument.hpp",
        "include/boost/spirit/home/lex/argument_phoenix.hpp",
        "include/boost/spirit/home/lex/detail/sequence_function.hpp",
        "include/boost/spirit/home/lex/domain.hpp",
        "include/boost/spirit/home/lex/lexer.hpp",
        "include/boost/spirit/home/lex/lexer/action.hpp",
        "include/boost/spirit/home/lex/lexer/char_token_def.hpp",
        "include/boost/spirit/home/lex/lexer/lexer.hpp",
        "include/boost/spirit/home/lex/lexer/lexertl/functor.hpp",
        "include/boost/spirit/home/lex/lexer/lexertl/functor_data.hpp",
        "include/boost/spirit/home/lex/lexer/lexertl/generate_static.hpp",
        "include/boost/spirit/home/lex/lexer/lexertl/iterator.hpp",
        "include/boost/spirit/home/lex/lexer/lexertl/iterator_tokenizer.hpp",
        "include/boost/spirit/home/lex/lexer/lexertl/lexer.hpp",
        "include/boost/spirit/home/lex/lexer/lexertl/position_token.hpp",
        "include/boost/spirit/home/lex/lexer/lexertl/semantic_action_data.hpp",
        "include/boost/spirit/home/lex/lexer/lexertl/static_functor_data.hpp",
        "include/boost/spirit/home/lex/lexer/lexertl/static_lexer.hpp",
        "include/boost/spirit/home/lex/lexer/lexertl/static_version.hpp",
        "include/boost/spirit/home/lex/lexer/lexertl/token.hpp",
        "include/boost/spirit/home/lex/lexer/lexertl/wrap_action.hpp",
        "include/boost/spirit/home/lex/lexer/pass_flags.hpp",
        "include/boost/spirit/home/lex/lexer/sequence.hpp",
        "include/boost/spirit/home/lex/lexer/string_token_def.hpp",
        "include/boost/spirit/home/lex/lexer/support_functions.hpp",
        "include/boost/spirit/home/lex/lexer/support_functions_expression.hpp",
        "include/boost/spirit/home/lex/lexer/terminals.hpp",
        "include/boost/spirit/home/lex/lexer/token_def.hpp",
        "include/boost/spirit/home/lex/lexer_lexertl.hpp",
        "include/boost/spirit/home/lex/lexer_static_lexertl.hpp",
        "include/boost/spirit/home/lex/lexer_type.hpp",
        "include/boost/spirit/home/lex/meta_compiler.hpp",
        "include/boost/spirit/home/lex/primitives.hpp",
        "include/boost/spirit/home/lex/qi.hpp",
        "include/boost/spirit/home/lex/qi/in_state.hpp",
        "include/boost/spirit/home/lex/qi/plain_raw_token.hpp",
        "include/boost/spirit/home/lex/qi/plain_token.hpp",
        "include/boost/spirit/home/lex/qi/plain_tokenid.hpp",
        "include/boost/spirit/home/lex/qi/plain_tokenid_mask.hpp",
        "include/boost/spirit/home/lex/qi/state_switcher.hpp",
        "include/boost/spirit/home/lex/reference.hpp",
        "include/boost/spirit/home/lex/tokenize_and_parse.hpp",
        "include/boost/spirit/home/lex/tokenize_and_parse_attr.hpp",
        "include/boost/spirit/home/qi.hpp",
        "include/boost/spirit/home/qi/action.hpp",
        "include/boost/spirit/home/qi/action/action.hpp",
        "include/boost/spirit/home/qi/auto.hpp",
        "include/boost/spirit/home/qi/auto/auto.hpp",
        "include/boost/spirit/home/qi/auto/create_parser.hpp",
        "include/boost/spirit/home/qi/auto/meta_create.hpp",
        "include/boost/spirit/home/qi/auxiliary.hpp",
        "include/boost/spirit/home/qi/auxiliary/attr.hpp",
        "include/boost/spirit/home/qi/auxiliary/attr_cast.hpp",
        "include/boost/spirit/home/qi/auxiliary/eoi.hpp",
        "include/boost/spirit/home/qi/auxiliary/eol.hpp",
        "include/boost/spirit/home/qi/auxiliary/eps.hpp",
        "include/boost/spirit/home/qi/auxiliary/lazy.hpp",
        "include/boost/spirit/home/qi/binary.hpp",
        "include/boost/spirit/home/qi/binary/binary.hpp",
        "include/boost/spirit/home/qi/char.hpp",
        "include/boost/spirit/home/qi/char/char.hpp",
        "include/boost/spirit/home/qi/char/char_class.hpp",
        "include/boost/spirit/home/qi/char/char_parser.hpp",
        "include/boost/spirit/home/qi/copy.hpp",
        "include/boost/spirit/home/qi/detail/alternative_function.hpp",
        "include/boost/spirit/home/qi/detail/assign_to.hpp",
        "include/boost/spirit/home/qi/detail/attributes.hpp",
        "include/boost/spirit/home/qi/detail/construct.hpp",
        "include/boost/spirit/home/qi/detail/enable_lit.hpp",
        "include/boost/spirit/home/qi/detail/expect_function.hpp",
        "include/boost/spirit/home/qi/detail/expectation_failure.hpp",
        "include/boost/spirit/home/qi/detail/fail_function.hpp",
        "include/boost/spirit/home/qi/detail/parse.hpp",
        "include/boost/spirit/home/qi/detail/parse_auto.hpp",
        "include/boost/spirit/home/qi/detail/pass_container.hpp",
        "include/boost/spirit/home/qi/detail/pass_function.hpp",
        "include/boost/spirit/home/qi/detail/permute_function.hpp",
        "include/boost/spirit/home/qi/detail/string_parse.hpp",
        "include/boost/spirit/home/qi/detail/unused_skipper.hpp",
        "include/boost/spirit/home/qi/directive.hpp",
        "include/boost/spirit/home/qi/directive/as.hpp",
        "include/boost/spirit/home/qi/directive/encoding.hpp",
        "include/boost/spirit/home/qi/directive/expect.hpp",
        "include/boost/spirit/home/qi/directive/hold.hpp",
        "include/boost/spirit/home/qi/directive/lexeme.hpp",
        "include/boost/spirit/home/qi/directive/matches.hpp",
        "include/boost/spirit/home/qi/directive/no_case.hpp",
        "include/boost/spirit/home/qi/directive/no_skip.hpp",
        "include/boost/spirit/home/qi/directive/omit.hpp",
        "include/boost/spirit/home/qi/directive/raw.hpp",
        "include/boost/spirit/home/qi/directive/repeat.hpp",
        "include/boost/spirit/home/qi/directive/skip.hpp",
        "include/boost/spirit/home/qi/domain.hpp",
        "include/boost/spirit/home/qi/match.hpp",
        "include/boost/spirit/home/qi/match_auto.hpp",
        "include/boost/spirit/home/qi/meta_compiler.hpp",
        "include/boost/spirit/home/qi/nonterminal.hpp",
        "include/boost/spirit/home/qi/nonterminal/debug_handler.hpp",
        "include/boost/spirit/home/qi/nonterminal/debug_handler_state.hpp",
        "include/boost/spirit/home/qi/nonterminal/detail/fcall.hpp",
        "include/boost/spirit/home/qi/nonterminal/detail/parameterized.hpp",
        "include/boost/spirit/home/qi/nonterminal/detail/parser_binder.hpp",
        "include/boost/spirit/home/qi/nonterminal/error_handler.hpp",
        "include/boost/spirit/home/qi/nonterminal/grammar.hpp",
        "include/boost/spirit/home/qi/nonterminal/nonterminal_fwd.hpp",
        "include/boost/spirit/home/qi/nonterminal/rule.hpp",
        "include/boost/spirit/home/qi/nonterminal/simple_trace.hpp",
        "include/boost/spirit/home/qi/nonterminal/success_handler.hpp",
        "include/boost/spirit/home/qi/numeric.hpp",
        "include/boost/spirit/home/qi/numeric/bool.hpp",
        "include/boost/spirit/home/qi/numeric/bool_policies.hpp",
        "include/boost/spirit/home/qi/numeric/detail/numeric_utils.hpp",
        "include/boost/spirit/home/qi/numeric/detail/real_impl.hpp",
        "include/boost/spirit/home/qi/numeric/int.hpp",
        "include/boost/spirit/home/qi/numeric/numeric_utils.hpp",
        "include/boost/spirit/home/qi/numeric/real.hpp",
        "include/boost/spirit/home/qi/numeric/real_policies.hpp",
        "include/boost/spirit/home/qi/numeric/uint.hpp",
        "include/boost/spirit/home/qi/operator.hpp",
        "include/boost/spirit/home/qi/operator/alternative.hpp",
        "include/boost/spirit/home/qi/operator/and_predicate.hpp",
        "include/boost/spirit/home/qi/operator/difference.hpp",
        "include/boost/spirit/home/qi/operator/expect.hpp",
        "include/boost/spirit/home/qi/operator/kleene.hpp",
        "include/boost/spirit/home/qi/operator/list.hpp",
        "include/boost/spirit/home/qi/operator/not_predicate.hpp",
        "include/boost/spirit/home/qi/operator/optional.hpp",
        "include/boost/spirit/home/qi/operator/permutation.hpp",
        "include/boost/spirit/home/qi/operator/plus.hpp",
        "include/boost/spirit/home/qi/operator/sequence.hpp",
        "include/boost/spirit/home/qi/operator/sequence_base.hpp",
        "include/boost/spirit/home/qi/operator/sequential_or.hpp",
        "include/boost/spirit/home/qi/parse.hpp",
        "include/boost/spirit/home/qi/parse_attr.hpp",
        "include/boost/spirit/home/qi/parser.hpp",
        "include/boost/spirit/home/qi/reference.hpp",
        "include/boost/spirit/home/qi/skip_flag.hpp",
        "include/boost/spirit/home/qi/skip_over.hpp",
        "include/boost/spirit/home/qi/stream.hpp",
        "include/boost/spirit/home/qi/stream/detail/iterator_source.hpp",
        "include/boost/spirit/home/qi/stream/detail/match_manip.hpp",
        "include/boost/spirit/home/qi/stream/detail/match_manip_auto.hpp",
        "include/boost/spirit/home/qi/stream/match_manip.hpp",
        "include/boost/spirit/home/qi/stream/match_manip_attr.hpp",
        "include/boost/spirit/home/qi/stream/stream.hpp",
        "include/boost/spirit/home/qi/string.hpp",
        "include/boost/spirit/home/qi/string/detail/tst.hpp",
        "include/boost/spirit/home/qi/string/lit.hpp",
        "include/boost/spirit/home/qi/string/symbols.hpp",
        "include/boost/spirit/home/qi/string/tst.hpp",
        "include/boost/spirit/home/qi/string/tst_map.hpp",
        "include/boost/spirit/home/qi/what.hpp",
        "include/boost/spirit/home/support.hpp",
        "include/boost/spirit/home/support/action_dispatch.hpp",
        "include/boost/spirit/home/support/adapt_adt_attributes.hpp",
        "include/boost/spirit/home/support/algorithm/any.hpp",
        "include/boost/spirit/home/support/algorithm/any_if.hpp",
        "include/boost/spirit/home/support/algorithm/any_if_ns.hpp",
        "include/boost/spirit/home/support/algorithm/any_if_ns_so.hpp",
        "include/boost/spirit/home/support/algorithm/any_ns.hpp",
        "include/boost/spirit/home/support/algorithm/any_ns_so.hpp",
        "include/boost/spirit/home/support/argument.hpp",
        "include/boost/spirit/home/support/argument_expression.hpp",
        "include/boost/spirit/home/support/assert_msg.hpp",
        "include/boost/spirit/home/support/attributes.hpp",
        "include/boost/spirit/home/support/attributes_fwd.hpp",
        "include/boost/spirit/home/support/auto.hpp",
        "include/boost/spirit/home/support/auto/meta_create.hpp",
        "include/boost/spirit/home/support/auxiliary/attr_cast.hpp",
        "include/boost/spirit/home/support/char_class.hpp",
        "include/boost/spirit/home/support/char_encoding/ascii.hpp",
        "include/boost/spirit/home/support/char_encoding/iso8859_1.hpp",
        "include/boost/spirit/home/support/char_encoding/standard.hpp",
        "include/boost/spirit/home/support/char_encoding/standard_wide.hpp",
        "include/boost/spirit/home/support/char_encoding/unicode.hpp",
        "include/boost/spirit/home/support/char_encoding/unicode/category_table.hpp",
        "include/boost/spirit/home/support/char_encoding/unicode/lowercase_table.hpp",
        "include/boost/spirit/home/support/char_encoding/unicode/query.hpp",
        "include/boost/spirit/home/support/char_encoding/unicode/script_table.hpp",
        "include/boost/spirit/home/support/char_encoding/unicode/uppercase_table.hpp",
        "include/boost/spirit/home/support/char_set/basic_chset.hpp",
        "include/boost/spirit/home/support/char_set/range.hpp",
        "include/boost/spirit/home/support/char_set/range_functions.hpp",
        "include/boost/spirit/home/support/char_set/range_run.hpp",
        "include/boost/spirit/home/support/char_set/range_run_impl.hpp",
        "include/boost/spirit/home/support/common_terminals.hpp",
        "include/boost/spirit/home/support/container.hpp",
        "include/boost/spirit/home/support/context.hpp",
        "include/boost/spirit/home/support/detail/as_variant.hpp",
        "include/boost/spirit/home/support/detail/endian.hpp",
        "include/boost/spirit/home/support/detail/endian/cover_operators.hpp",
        "include/boost/spirit/home/support/detail/endian/endian.hpp",
        "include/boost/spirit/home/support/detail/get_encoding.hpp",
        "include/boost/spirit/home/support/detail/hold_any.hpp",
        "include/boost/spirit/home/support/detail/is_spirit_tag.hpp",
        "include/boost/spirit/home/support/detail/lexer/char_traits.hpp",
        "include/boost/spirit/home/support/detail/lexer/consts.hpp",
        "include/boost/spirit/home/support/detail/lexer/containers/ptr_list.hpp",
        "include/boost/spirit/home/support/detail/lexer/containers/ptr_vector.hpp",
        "include/boost/spirit/home/support/detail/lexer/conversion/char_state_machine.hpp",
        "include/boost/spirit/home/support/detail/lexer/debug.hpp",
        "include/boost/spirit/home/support/detail/lexer/file_input.hpp",
        "include/boost/spirit/home/support/detail/lexer/generate_cpp.hpp",
        "include/boost/spirit/home/support/detail/lexer/generate_re2c.hpp",
        "include/boost/spirit/home/support/detail/lexer/generator.hpp",
        "include/boost/spirit/home/support/detail/lexer/input.hpp",
        "include/boost/spirit/home/support/detail/lexer/internals.hpp",
        "include/boost/spirit/home/support/detail/lexer/parser/parser.hpp",
        "include/boost/spirit/home/support/detail/lexer/parser/tokeniser/num_token.hpp",
        "include/boost/spirit/home/support/detail/lexer/parser/tokeniser/re_tokeniser.hpp",
        "include/boost/spirit/home/support/detail/lexer/parser/tokeniser/re_tokeniser_helper.hpp",
        "include/boost/spirit/home/support/detail/lexer/parser/tokeniser/re_tokeniser_state.hpp",
        "include/boost/spirit/home/support/detail/lexer/parser/tree/end_node.hpp",
        "include/boost/spirit/home/support/detail/lexer/parser/tree/iteration_node.hpp",
        "include/boost/spirit/home/support/detail/lexer/parser/tree/leaf_node.hpp",
        "include/boost/spirit/home/support/detail/lexer/parser/tree/node.hpp",
        "include/boost/spirit/home/support/detail/lexer/parser/tree/selection_node.hpp",
        "include/boost/spirit/home/support/detail/lexer/parser/tree/sequence_node.hpp",
        "include/boost/spirit/home/support/detail/lexer/partition/charset.hpp",
        "include/boost/spirit/home/support/detail/lexer/partition/equivset.hpp",
        "include/boost/spirit/home/support/detail/lexer/rules.hpp",
        "include/boost/spirit/home/support/detail/lexer/runtime_error.hpp",
        "include/boost/spirit/home/support/detail/lexer/serialise.hpp",
        "include/boost/spirit/home/support/detail/lexer/size_t.hpp",
        "include/boost/spirit/home/support/detail/lexer/state_machine.hpp",
        "include/boost/spirit/home/support/detail/lexer/string_token.hpp",
        "include/boost/spirit/home/support/detail/make_cons.hpp",
        "include/boost/spirit/home/support/detail/make_vector.hpp",
        "include/boost/spirit/home/support/detail/math/detail/fp_traits.hpp",
        "include/boost/spirit/home/support/detail/math/fpclassify.hpp",
        "include/boost/spirit/home/support/detail/math/signbit.hpp",
        "include/boost/spirit/home/support/detail/pow10.hpp",
        "include/boost/spirit/home/support/detail/scoped_enum_emulation.hpp",
        "include/boost/spirit/home/support/detail/sign.hpp",
        "include/boost/spirit/home/support/detail/what_function.hpp",
        "include/boost/spirit/home/support/extended_variant.hpp",
        "include/boost/spirit/home/support/handles_container.hpp",
        "include/boost/spirit/home/support/has_semantic_action.hpp",
        "include/boost/spirit/home/support/info.hpp",
        "include/boost/spirit/home/support/iterators/detail/buf_id_check_policy.hpp",
        "include/boost/spirit/home/support/iterators/detail/buffering_input_iterator_policy.hpp",
        "include/boost/spirit/home/support/iterators/detail/combine_policies.hpp",
        "include/boost/spirit/home/support/iterators/detail/first_owner_policy.hpp",
        "include/boost/spirit/home/support/iterators/detail/fixed_size_queue.hpp",
        "include/boost/spirit/home/support/iterators/detail/fixed_size_queue_policy.hpp",
        "include/boost/spirit/home/support/iterators/detail/functor_input_policy.hpp",
        "include/boost/spirit/home/support/iterators/detail/input_iterator_policy.hpp",
        "include/boost/spirit/home/support/iterators/detail/istream_policy.hpp",
        "include/boost/spirit/home/support/iterators/detail/lex_input_policy.hpp",
        "include/boost/spirit/home/support/iterators/detail/multi_pass.hpp",
        "include/boost/spirit/home/support/iterators/detail/no_check_policy.hpp",
        "include/boost/spirit/home/support/iterators/detail/ref_counted_policy.hpp",
        "include/boost/spirit/home/support/iterators/detail/split_functor_input_policy.hpp",
        "include/boost/spirit/home/support/iterators/detail/split_std_deque_policy.hpp",
        "include/boost/spirit/home/support/iterators/istream_iterator.hpp",
        "include/boost/spirit/home/support/iterators/line_pos_iterator.hpp",
        "include/boost/spirit/home/support/iterators/look_ahead.hpp",
        "include/boost/spirit/home/support/iterators/multi_pass.hpp",
        "include/boost/spirit/home/support/iterators/multi_pass_fwd.hpp",
        "include/boost/spirit/home/support/iterators/ostream_iterator.hpp",
        "include/boost/spirit/home/support/lazy.hpp",
        "include/boost/spirit/home/support/limits.hpp",
        "include/boost/spirit/home/support/make_component.hpp",
        "include/boost/spirit/home/support/meta_compiler.hpp",
        "include/boost/spirit/home/support/modify.hpp",
        "include/boost/spirit/home/support/multi_pass.hpp",
        "include/boost/spirit/home/support/multi_pass_wrapper.hpp",
        "include/boost/spirit/home/support/nonterminal/expand_arg.hpp",
        "include/boost/spirit/home/support/nonterminal/extract_param.hpp",
        "include/boost/spirit/home/support/nonterminal/locals.hpp",
        "include/boost/spirit/home/support/numeric_traits.hpp",
        "include/boost/spirit/home/support/sequence_base_id.hpp",
        "include/boost/spirit/home/support/string_traits.hpp",
        "include/boost/spirit/home/support/terminal.hpp",
        "include/boost/spirit/home/support/terminal_expression.hpp",
        "include/boost/spirit/home/support/unused.hpp",
        "include/boost/spirit/home/support/utf8.hpp",
        "include/boost/spirit/home/support/utree.hpp",
        "include/boost/spirit/home/support/utree/detail/utree_detail1.hpp",
        "include/boost/spirit/home/support/utree/detail/utree_detail2.hpp",
        "include/boost/spirit/home/support/utree/operators.hpp",
        "include/boost/spirit/home/support/utree/utree.hpp",
        "include/boost/spirit/home/support/utree/utree_traits.hpp",
        "include/boost/spirit/home/support/utree/utree_traits_fwd.hpp",
        "include/boost/spirit/home/x3.hpp",
        "include/boost/spirit/home/x3/auxiliary.hpp",
        "include/boost/spirit/home/x3/auxiliary/any_parser.hpp",
        "include/boost/spirit/home/x3/auxiliary/attr.hpp",
        "include/boost/spirit/home/x3/auxiliary/eoi.hpp",
        "include/boost/spirit/home/x3/auxiliary/eol.hpp",
        "include/boost/spirit/home/x3/auxiliary/eps.hpp",
        "include/boost/spirit/home/x3/auxiliary/guard.hpp",
        "include/boost/spirit/home/x3/binary.hpp",
        "include/boost/spirit/home/x3/binary/binary.hpp",
        "include/boost/spirit/home/x3/char.hpp",
        "include/boost/spirit/home/x3/char/any_char.hpp",
        "include/boost/spirit/home/x3/char/char.hpp",
        "include/boost/spirit/home/x3/char/char_class.hpp",
        "include/boost/spirit/home/x3/char/char_class_tags.hpp",
        "include/boost/spirit/home/x3/char/char_parser.hpp",
        "include/boost/spirit/home/x3/char/char_set.hpp",
        "include/boost/spirit/home/x3/char/detail/cast_char.hpp",
        "include/boost/spirit/home/x3/char/literal_char.hpp",
        "include/boost/spirit/home/x3/char/negated_char_parser.hpp",
        "include/boost/spirit/home/x3/char/unicode.hpp",
        "include/boost/spirit/home/x3/core.hpp",
        "include/boost/spirit/home/x3/core/action.hpp",
        "include/boost/spirit/home/x3/core/call.hpp",
        "include/boost/spirit/home/x3/core/detail/parse_into_container.hpp",
        "include/boost/spirit/home/x3/core/parse.hpp",
        "include/boost/spirit/home/x3/core/parser.hpp",
        "include/boost/spirit/home/x3/core/proxy.hpp",
        "include/boost/spirit/home/x3/core/skip_over.hpp",
        "include/boost/spirit/home/x3/directive.hpp",
        "include/boost/spirit/home/x3/directive/confix.hpp",
        "include/boost/spirit/home/x3/directive/expect.hpp",
        "include/boost/spirit/home/x3/directive/lexeme.hpp",
        "include/boost/spirit/home/x3/directive/matches.hpp",
        "include/boost/spirit/home/x3/directive/no_case.hpp",
        "include/boost/spirit/home/x3/directive/no_skip.hpp",
        "include/boost/spirit/home/x3/directive/omit.hpp",
        "include/boost/spirit/home/x3/directive/raw.hpp",
        "include/boost/spirit/home/x3/directive/repeat.hpp",
        "include/boost/spirit/home/x3/directive/seek.hpp",
        "include/boost/spirit/home/x3/directive/skip.hpp",
        "include/boost/spirit/home/x3/directive/with.hpp",
        "include/boost/spirit/home/x3/nonterminal.hpp",
        "include/boost/spirit/home/x3/nonterminal/debug_handler_state.hpp",
        "include/boost/spirit/home/x3/nonterminal/detail/rule.hpp",
        "include/boost/spirit/home/x3/nonterminal/detail/transform_attribute.hpp",
        "include/boost/spirit/home/x3/nonterminal/rule.hpp",
        "include/boost/spirit/home/x3/nonterminal/simple_trace.hpp",
        "include/boost/spirit/home/x3/numeric.hpp",
        "include/boost/spirit/home/x3/numeric/bool.hpp",
        "include/boost/spirit/home/x3/numeric/bool_policies.hpp",
        "include/boost/spirit/home/x3/numeric/int.hpp",
        "include/boost/spirit/home/x3/numeric/real.hpp",
        "include/boost/spirit/home/x3/numeric/real_policies.hpp",
        "include/boost/spirit/home/x3/numeric/uint.hpp",
        "include/boost/spirit/home/x3/operator.hpp",
        "include/boost/spirit/home/x3/operator/alternative.hpp",
        "include/boost/spirit/home/x3/operator/and_predicate.hpp",
        "include/boost/spirit/home/x3/operator/detail/alternative.hpp",
        "include/boost/spirit/home/x3/operator/detail/sequence.hpp",
        "include/boost/spirit/home/x3/operator/difference.hpp",
        "include/boost/spirit/home/x3/operator/kleene.hpp",
        "include/boost/spirit/home/x3/operator/list.hpp",
        "include/boost/spirit/home/x3/operator/not_predicate.hpp",
        "include/boost/spirit/home/x3/operator/optional.hpp",
        "include/boost/spirit/home/x3/operator/plus.hpp",
        "include/boost/spirit/home/x3/operator/sequence.hpp",
        "include/boost/spirit/home/x3/string.hpp",
        "include/boost/spirit/home/x3/string/detail/no_case_string_parse.hpp",
        "include/boost/spirit/home/x3/string/detail/string_parse.hpp",
        "include/boost/spirit/home/x3/string/detail/tst.hpp",
        "include/boost/spirit/home/x3/string/literal_string.hpp",
        "include/boost/spirit/home/x3/string/symbols.hpp",
        "include/boost/spirit/home/x3/string/tst.hpp",
        "include/boost/spirit/home/x3/string/tst_map.hpp",
        "include/boost/spirit/home/x3/support/ast/position_tagged.hpp",
        "include/boost/spirit/home/x3/support/ast/variant.hpp",
        "include/boost/spirit/home/x3/support/context.hpp",
        "include/boost/spirit/home/x3/support/no_case.hpp",
        "include/boost/spirit/home/x3/support/numeric_utils/detail/extract_int.hpp",
        "include/boost/spirit/home/x3/support/numeric_utils/extract_int.hpp",
        "include/boost/spirit/home/x3/support/numeric_utils/extract_real.hpp",
        "include/boost/spirit/home/x3/support/numeric_utils/pow10.hpp",
        "include/boost/spirit/home/x3/support/numeric_utils/sign.hpp",
        "include/boost/spirit/home/x3/support/subcontext.hpp",
        "include/boost/spirit/home/x3/support/traits/attribute_category.hpp",
        "include/boost/spirit/home/x3/support/traits/attribute_of.hpp",
        "include/boost/spirit/home/x3/support/traits/attribute_type.hpp",
        "include/boost/spirit/home/x3/support/traits/container_traits.hpp",
        "include/boost/spirit/home/x3/support/traits/handles_container.hpp",
        "include/boost/spirit/home/x3/support/traits/has_attribute.hpp",
        "include/boost/spirit/home/x3/support/traits/is_parser.hpp",
        "include/boost/spirit/home/x3/support/traits/is_range.hpp",
        "include/boost/spirit/home/x3/support/traits/is_substitute.hpp",
        "include/boost/spirit/home/x3/support/traits/is_variant.hpp",
        "include/boost/spirit/home/x3/support/traits/make_attribute.hpp",
        "include/boost/spirit/home/x3/support/traits/move_to.hpp",
        "include/boost/spirit/home/x3/support/traits/numeric_traits.hpp",
        "include/boost/spirit/home/x3/support/traits/optional_traits.hpp",
        "include/boost/spirit/home/x3/support/traits/print_attribute.hpp",
        "include/boost/spirit/home/x3/support/traits/print_token.hpp",
        "include/boost/spirit/home/x3/support/traits/string_traits.hpp",
        "include/boost/spirit/home/x3/support/traits/transform_attribute.hpp",
        "include/boost/spirit/home/x3/support/traits/tuple_traits.hpp",
        "include/boost/spirit/home/x3/support/traits/value_traits.hpp",
        "include/boost/spirit/home/x3/support/traits/variant_find_substitute.hpp",
        "include/boost/spirit/home/x3/support/traits/variant_has_substitute.hpp",
        "include/boost/spirit/home/x3/support/unused.hpp",
        "include/boost/spirit/home/x3/support/utility/annotate_on_success.hpp",
        "include/boost/spirit/home/x3/support/utility/error_reporting.hpp",
        "include/boost/spirit/home/x3/support/utility/is_callable.hpp",
        "include/boost/spirit/home/x3/support/utility/lambda_visitor.hpp",
        "include/boost/spirit/home/x3/support/utility/sfinae.hpp",
        "include/boost/spirit/home/x3/support/utility/testing.hpp",
        "include/boost/spirit/home/x3/support/utility/unrefcv.hpp",
        "include/boost/spirit/home/x3/support/utility/utf8.hpp",
        "include/boost/spirit/home/x3/version.hpp",
        "include/boost/spirit/include/classic.hpp",
        "include/boost/spirit/include/classic_actions.hpp",
        "include/boost/spirit/include/classic_actor.hpp",
        "include/boost/spirit/include/classic_alternative.hpp",
        "include/boost/spirit/include/classic_as_parser.hpp",
        "include/boost/spirit/include/classic_assert.hpp",
        "include/boost/spirit/include/classic_assign_actor.hpp",
        "include/boost/spirit/include/classic_assign_key_actor.hpp",
        "include/boost/spirit/include/classic_ast.hpp",
        "include/boost/spirit/include/classic_ast_fwd.hpp",
        "include/boost/spirit/include/classic_attribute.hpp",
        "include/boost/spirit/include/classic_basic_chset.hpp",
        "include/boost/spirit/include/classic_chset.hpp",
        "include/boost/spirit/include/classic_chset_operators.hpp",
        "include/boost/spirit/include/classic_clear_actor.hpp",
        "include/boost/spirit/include/classic_closure.hpp",
        "include/boost/spirit/include/classic_closure_context.hpp",
        "include/boost/spirit/include/classic_closure_fwd.hpp",
        "include/boost/spirit/include/classic_common.hpp",
        "include/boost/spirit/include/classic_common_fwd.hpp",
        "include/boost/spirit/include/classic_composite.hpp",
        "include/boost/spirit/include/classic_config.hpp",
        "include/boost/spirit/include/classic_confix.hpp",
        "include/boost/spirit/include/classic_confix_fwd.hpp",
        "include/boost/spirit/include/classic_core.hpp",
        "include/boost/spirit/include/classic_debug.hpp",
        "include/boost/spirit/include/classic_debug_node.hpp",
        "include/boost/spirit/include/classic_decrement_actor.hpp",
        "include/boost/spirit/include/classic_difference.hpp",
        "include/boost/spirit/include/classic_directives.hpp",
        "include/boost/spirit/include/classic_distinct.hpp",
        "include/boost/spirit/include/classic_distinct_fwd.hpp",
        "include/boost/spirit/include/classic_dynamic.hpp",
        "include/boost/spirit/include/classic_epsilon.hpp",
        "include/boost/spirit/include/classic_erase_actor.hpp",
        "include/boost/spirit/include/classic_error_handling.hpp",
        "include/boost/spirit/include/classic_escape_char.hpp",
        "include/boost/spirit/include/classic_escape_char_fwd.hpp",
        "include/boost/spirit/include/classic_exceptions.hpp",
        "include/boost/spirit/include/classic_exceptions_fwd.hpp",
        "include/boost/spirit/include/classic_exclusive_or.hpp",
        "include/boost/spirit/include/classic_file_iterator.hpp",
        "include/boost/spirit/include/classic_file_iterator_fwd.hpp",
        "include/boost/spirit/include/classic_fixed_size_queue.hpp",
        "include/boost/spirit/include/classic_flush_multi_pass.hpp",
        "include/boost/spirit/include/classic_for.hpp",
        "include/boost/spirit/include/classic_functor_parser.hpp",
        "include/boost/spirit/include/classic_fundamental.hpp",
        "include/boost/spirit/include/classic_grammar.hpp",
        "include/boost/spirit/include/classic_grammar_def.hpp",
        "include/boost/spirit/include/classic_grammar_def_fwd.hpp",
        "include/boost/spirit/include/classic_if.hpp",
        "include/boost/spirit/include/classic_increment_actor.hpp",
        "include/boost/spirit/include/classic_insert_at_actor.hpp",
        "include/boost/spirit/include/classic_insert_key_actor.hpp",
        "include/boost/spirit/include/classic_intersection.hpp",
        "include/boost/spirit/include/classic_iterator.hpp",
        "include/boost/spirit/include/classic_kleene_star.hpp",
        "include/boost/spirit/include/classic_lazy.hpp",
        "include/boost/spirit/include/classic_list.hpp",
        "include/boost/spirit/include/classic_lists.hpp",
        "include/boost/spirit/include/classic_lists_fwd.hpp",
        "include/boost/spirit/include/classic_loops.hpp",
        "include/boost/spirit/include/classic_match.hpp",
        "include/boost/spirit/include/classic_meta.hpp",
        "include/boost/spirit/include/classic_minimal.hpp",
        "include/boost/spirit/include/classic_multi_pass.hpp",
        "include/boost/spirit/include/classic_multi_pass_fwd.hpp",
        "include/boost/spirit/include/classic_nil.hpp",
        "include/boost/spirit/include/classic_no_actions.hpp",
        "include/boost/spirit/include/classic_numerics.hpp",
        "include/boost/spirit/include/classic_numerics_fwd.hpp",
        "include/boost/spirit/include/classic_operators.hpp",
        "include/boost/spirit/include/classic_optional.hpp",
        "include/boost/spirit/include/classic_parametric.hpp",
        "include/boost/spirit/include/classic_parse_tree.hpp",
        "include/boost/spirit/include/classic_parse_tree_fwd.hpp",
        "include/boost/spirit/include/classic_parse_tree_utils.hpp",
        "include/boost/spirit/include/classic_parser.hpp",
        "include/boost/spirit/include/classic_parser_context.hpp",
        "include/boost/spirit/include/classic_parser_id.hpp",
        "include/boost/spirit/include/classic_parser_names.hpp",
        "include/boost/spirit/include/classic_parser_traits.hpp",
        "include/boost/spirit/include/classic_position_iterator.hpp",
        "include/boost/spirit/include/classic_position_iterator_fwd.hpp",
        "include/boost/spirit/include/classic_positive.hpp",
        "include/boost/spirit/include/classic_primitives.hpp",
        "include/boost/spirit/include/classic_push_back_actor.hpp",
        "include/boost/spirit/include/classic_push_front_actor.hpp",
        "include/boost/spirit/include/classic_range_run.hpp",
        "include/boost/spirit/include/classic_ref_actor.hpp",
        "include/boost/spirit/include/classic_ref_const_ref_actor.hpp",
        "include/boost/spirit/include/classic_ref_const_ref_const_ref_a.hpp",
        "include/boost/spirit/include/classic_ref_const_ref_value_actor.hpp",
        "include/boost/spirit/include/classic_ref_value_actor.hpp",
        "include/boost/spirit/include/classic_refactoring.hpp",
        "include/boost/spirit/include/classic_regex.hpp",
        "include/boost/spirit/include/classic_rule.hpp",
        "include/boost/spirit/include/classic_rule_alias.hpp",
        "include/boost/spirit/include/classic_rule_parser.hpp",
        "include/boost/spirit/include/classic_safe_bool.hpp",
        "include/boost/spirit/include/classic_scanner.hpp",
        "include/boost/spirit/include/classic_scanner_fwd.hpp",
        "include/boost/spirit/include/classic_scoped_lock.hpp",
        "include/boost/spirit/include/classic_select.hpp",
        "include/boost/spirit/include/classic_sequence.hpp",
        "include/boost/spirit/include/classic_sequential_and.hpp",
        "include/boost/spirit/include/classic_sequential_or.hpp",
        "include/boost/spirit/include/classic_skipper.hpp",
        "include/boost/spirit/include/classic_skipper_fwd.hpp",
        "include/boost/spirit/include/classic_spirit.hpp",
        "include/boost/spirit/include/classic_static.hpp",
        "include/boost/spirit/include/classic_stored_rule.hpp",
        "include/boost/spirit/include/classic_stored_rule_fwd.hpp",
        "include/boost/spirit/include/classic_subrule.hpp",
        "include/boost/spirit/include/classic_subrule_fwd.hpp",
        "include/boost/spirit/include/classic_swap_actor.hpp",
        "include/boost/spirit/include/classic_switch.hpp",
        "include/boost/spirit/include/classic_symbols.hpp",
        "include/boost/spirit/include/classic_symbols_fwd.hpp",
        "include/boost/spirit/include/classic_traverse.hpp",
        "include/boost/spirit/include/classic_tree_to_xml.hpp",
        "include/boost/spirit/include/classic_typeof.hpp",
        "include/boost/spirit/include/classic_utility.hpp",
        "include/boost/spirit/include/classic_version.hpp",
        "include/boost/spirit/include/classic_while.hpp",
        "include/boost/spirit/include/karma.hpp",
        "include/boost/spirit/include/karma_action.hpp",
        "include/boost/spirit/include/karma_alternative.hpp",
        "include/boost/spirit/include/karma_and_predicate.hpp",
        "include/boost/spirit/include/karma_as.hpp",
        "include/boost/spirit/include/karma_attr_cast.hpp",
        "include/boost/spirit/include/karma_auto.hpp",
        "include/boost/spirit/include/karma_auxiliary.hpp",
        "include/boost/spirit/include/karma_binary.hpp",
        "include/boost/spirit/include/karma_bool.hpp",
        "include/boost/spirit/include/karma_buffer.hpp",
        "include/boost/spirit/include/karma_center_alignment.hpp",
        "include/boost/spirit/include/karma_char.hpp",
        "include/boost/spirit/include/karma_char_.hpp",
        "include/boost/spirit/include/karma_char_class.hpp",
        "include/boost/spirit/include/karma_columns.hpp",
        "include/boost/spirit/include/karma_delimit.hpp",
        "include/boost/spirit/include/karma_directive.hpp",
        "include/boost/spirit/include/karma_domain.hpp",
        "include/boost/spirit/include/karma_duplicate.hpp",
        "include/boost/spirit/include/karma_eol.hpp",
        "include/boost/spirit/include/karma_eps.hpp",
        "include/boost/spirit/include/karma_format.hpp",
        "include/boost/spirit/include/karma_format_attr.hpp",
        "include/boost/spirit/include/karma_format_auto.hpp",
        "include/boost/spirit/include/karma_generate.hpp",
        "include/boost/spirit/include/karma_generate_attr.hpp",
        "include/boost/spirit/include/karma_generate_auto.hpp",
        "include/boost/spirit/include/karma_grammar.hpp",
        "include/boost/spirit/include/karma_int.hpp",
        "include/boost/spirit/include/karma_kleene.hpp",
        "include/boost/spirit/include/karma_lazy.hpp",
        "include/boost/spirit/include/karma_left_alignment.hpp",
        "include/boost/spirit/include/karma_list.hpp",
        "include/boost/spirit/include/karma_maxwidth.hpp",
        "include/boost/spirit/include/karma_no_delimit.hpp",
        "include/boost/spirit/include/karma_nonterminal.hpp",
        "include/boost/spirit/include/karma_not_predicate.hpp",
        "include/boost/spirit/include/karma_numeric.hpp",
        "include/boost/spirit/include/karma_omit.hpp",
        "include/boost/spirit/include/karma_operator.hpp",
        "include/boost/spirit/include/karma_optional.hpp",
        "include/boost/spirit/include/karma_phoenix_attributes.hpp",
        "include/boost/spirit/include/karma_plus.hpp",
        "include/boost/spirit/include/karma_real.hpp",
        "include/boost/spirit/include/karma_repeat.hpp",
        "include/boost/spirit/include/karma_right_alignment.hpp",
        "include/boost/spirit/include/karma_rule.hpp",
        "include/boost/spirit/include/karma_sequence.hpp",
        "include/boost/spirit/include/karma_stream.hpp",
        "include/boost/spirit/include/karma_strict_relaxed.hpp",
        "include/boost/spirit/include/karma_string.hpp",
        "include/boost/spirit/include/karma_symbols.hpp",
        "include/boost/spirit/include/karma_uint.hpp",
        "include/boost/spirit/include/karma_upper_lower_case.hpp",
        "include/boost/spirit/include/karma_verbatim.hpp",
        "include/boost/spirit/include/karma_what.hpp",
        "include/boost/spirit/include/lex.hpp",
        "include/boost/spirit/include/lex_char_token_def.hpp",
        "include/boost/spirit/include/lex_domain.hpp",
        "include/boost/spirit/include/lex_generate_static_lexertl.hpp",
        "include/boost/spirit/include/lex_lexer.hpp",
        "include/boost/spirit/include/lex_lexertl.hpp",
        "include/boost/spirit/include/lex_lexertl_position_token.hpp",
        "include/boost/spirit/include/lex_lexertl_token.hpp",
        "include/boost/spirit/include/lex_plain_token.hpp",
        "include/boost/spirit/include/lex_primitives.hpp",
        "include/boost/spirit/include/lex_static_lexertl.hpp",
        "include/boost/spirit/include/lex_tokenize_and_parse.hpp",
        "include/boost/spirit/include/lex_tokenize_and_parse_attr.hpp",
        "include/boost/spirit/include/phoenix.hpp",
        "include/boost/spirit/include/phoenix1.hpp",
        "include/boost/spirit/include/phoenix1_actor.hpp",
        "include/boost/spirit/include/phoenix1_binders.hpp",
        "include/boost/spirit/include/phoenix1_casts.hpp",
        "include/boost/spirit/include/phoenix1_closures.hpp",
        "include/boost/spirit/include/phoenix1_composite.hpp",
        "include/boost/spirit/include/phoenix1_functions.hpp",
        "include/boost/spirit/include/phoenix1_new.hpp",
        "include/boost/spirit/include/phoenix1_operators.hpp",
        "include/boost/spirit/include/phoenix1_primitives.hpp",
        "include/boost/spirit/include/phoenix1_special_ops.hpp",
        "include/boost/spirit/include/phoenix1_statements.hpp",
        "include/boost/spirit/include/phoenix1_tuple_helpers.hpp",
        "include/boost/spirit/include/phoenix1_tuples.hpp",
        "include/boost/spirit/include/phoenix_algorithm.hpp",
        "include/boost/spirit/include/phoenix_bind.hpp",
        "include/boost/spirit/include/phoenix_container.hpp",
        "include/boost/spirit/include/phoenix_core.hpp",
        "include/boost/spirit/include/phoenix_function.hpp",
        "include/boost/spirit/include/phoenix_fusion.hpp",
        "include/boost/spirit/include/phoenix_limits.hpp",
        "include/boost/spirit/include/phoenix_object.hpp",
        "include/boost/spirit/include/phoenix_operator.hpp",
        "include/boost/spirit/include/phoenix_scope.hpp",
        "include/boost/spirit/include/phoenix_statement.hpp",
        "include/boost/spirit/include/phoenix_stl.hpp",
        "include/boost/spirit/include/phoenix_version.hpp",
        "include/boost/spirit/include/qi.hpp",
        "include/boost/spirit/include/qi_action.hpp",
        "include/boost/spirit/include/qi_alternative.hpp",
        "include/boost/spirit/include/qi_and_predicate.hpp",
        "include/boost/spirit/include/qi_as.hpp",
        "include/boost/spirit/include/qi_as_string.hpp",
        "include/boost/spirit/include/qi_attr.hpp",
        "include/boost/spirit/include/qi_attr_cast.hpp",
        "include/boost/spirit/include/qi_auto.hpp",
        "include/boost/spirit/include/qi_auxiliary.hpp",
        "include/boost/spirit/include/qi_binary.hpp",
        "include/boost/spirit/include/qi_bool.hpp",
        "include/boost/spirit/include/qi_char.hpp",
        "include/boost/spirit/include/qi_char_.hpp",
        "include/boost/spirit/include/qi_char_class.hpp",
        "include/boost/spirit/include/qi_copy.hpp",
        "include/boost/spirit/include/qi_core.hpp",
        "include/boost/spirit/include/qi_difference.hpp",
        "include/boost/spirit/include/qi_directive.hpp",
        "include/boost/spirit/include/qi_domain.hpp",
        "include/boost/spirit/include/qi_eoi.hpp",
        "include/boost/spirit/include/qi_eol.hpp",
        "include/boost/spirit/include/qi_eps.hpp",
        "include/boost/spirit/include/qi_expect.hpp",
        "include/boost/spirit/include/qi_grammar.hpp",
        "include/boost/spirit/include/qi_hold.hpp",
        "include/boost/spirit/include/qi_int.hpp",
        "include/boost/spirit/include/qi_kleene.hpp",
        "include/boost/spirit/include/qi_lazy.hpp",
        "include/boost/spirit/include/qi_lexeme.hpp",
        "include/boost/spirit/include/qi_list.hpp",
        "include/boost/spirit/include/qi_lit.hpp",
        "include/boost/spirit/include/qi_match.hpp",
        "include/boost/spirit/include/qi_match_attr.hpp",
        "include/boost/spirit/include/qi_match_auto.hpp",
        "include/boost/spirit/include/qi_matches.hpp",
        "include/boost/spirit/include/qi_no_case.hpp",
        "include/boost/spirit/include/qi_no_skip.hpp",
        "include/boost/spirit/include/qi_nonterminal.hpp",
        "include/boost/spirit/include/qi_not_predicate.hpp",
        "include/boost/spirit/include/qi_numeric.hpp",
        "include/boost/spirit/include/qi_omit.hpp",
        "include/boost/spirit/include/qi_operator.hpp",
        "include/boost/spirit/include/qi_optional.hpp",
        "include/boost/spirit/include/qi_parse.hpp",
        "include/boost/spirit/include/qi_parse_attr.hpp",
        "include/boost/spirit/include/qi_parse_auto.hpp",
        "include/boost/spirit/include/qi_permutation.hpp",
        "include/boost/spirit/include/qi_plus.hpp",
        "include/boost/spirit/include/qi_raw.hpp",
        "include/boost/spirit/include/qi_real.hpp",
        "include/boost/spirit/include/qi_repeat.hpp",
        "include/boost/spirit/include/qi_rule.hpp",
        "include/boost/spirit/include/qi_sequence.hpp",
        "include/boost/spirit/include/qi_sequential_or.hpp",
        "include/boost/spirit/include/qi_skip.hpp",
        "include/boost/spirit/include/qi_stream.hpp",
        "include/boost/spirit/include/qi_string.hpp",
        "include/boost/spirit/include/qi_symbols.hpp",
        "include/boost/spirit/include/qi_uint.hpp",
        "include/boost/spirit/include/qi_what.hpp",
        "include/boost/spirit/include/support.hpp",
        "include/boost/spirit/include/support_adapt_adt_attributes.hpp",
        "include/boost/spirit/include/support_any.hpp",
        "include/boost/spirit/include/support_any_if.hpp",
        "include/boost/spirit/include/support_any_if_ns.hpp",
        "include/boost/spirit/include/support_any_if_ns_so.hpp",
        "include/boost/spirit/include/support_any_ns.hpp",
        "include/boost/spirit/include/support_any_ns_so.hpp",
        "include/boost/spirit/include/support_argument.hpp",
        "include/boost/spirit/include/support_ascii.hpp",
        "include/boost/spirit/include/support_attributes.hpp",
        "include/boost/spirit/include/support_attributes_fwd.hpp",
        "include/boost/spirit/include/support_auto.hpp",
        "include/boost/spirit/include/support_char_class.hpp",
        "include/boost/spirit/include/support_container.hpp",
        "include/boost/spirit/include/support_extended_variant.hpp",
        "include/boost/spirit/include/support_info.hpp",
        "include/boost/spirit/include/support_iso8859_1.hpp",
        "include/boost/spirit/include/support_istream_iterator.hpp",
        "include/boost/spirit/include/support_line_pos_iterator.hpp",
        "include/boost/spirit/include/support_locals.hpp",
        "include/boost/spirit/include/support_look_ahead.hpp",
        "include/boost/spirit/include/support_modify.hpp",
        "include/boost/spirit/include/support_multi_pass.hpp",
        "include/boost/spirit/include/support_multi_pass_fwd.hpp",
        "include/boost/spirit/include/support_ostream_iterator.hpp",
        "include/boost/spirit/include/support_standard.hpp",
        "include/boost/spirit/include/support_standard_wide.hpp",
        "include/boost/spirit/include/support_string_traits.hpp",
        "include/boost/spirit/include/support_unused.hpp",
        "include/boost/spirit/include/support_utree.hpp",
        "include/boost/spirit/include/version.hpp",
        "include/boost/spirit/repository/home/karma.hpp",
        "include/boost/spirit/repository/home/karma/directive.hpp",
        "include/boost/spirit/repository/home/karma/directive/confix.hpp",
        "include/boost/spirit/repository/home/karma/nonterminal.hpp",
        "include/boost/spirit/repository/home/karma/nonterminal/subrule.hpp",
        "include/boost/spirit/repository/home/qi.hpp",
        "include/boost/spirit/repository/home/qi/directive.hpp",
        "include/boost/spirit/repository/home/qi/directive/confix.hpp",
        "include/boost/spirit/repository/home/qi/directive/distinct.hpp",
        "include/boost/spirit/repository/home/qi/directive/kwd.hpp",
        "include/boost/spirit/repository/home/qi/directive/seek.hpp",
        "include/boost/spirit/repository/home/qi/nonterminal.hpp",
        "include/boost/spirit/repository/home/qi/nonterminal/subrule.hpp",
        "include/boost/spirit/repository/home/qi/operator.hpp",
        "include/boost/spirit/repository/home/qi/operator/detail/keywords.hpp",
        "include/boost/spirit/repository/home/qi/operator/keywords.hpp",
        "include/boost/spirit/repository/home/qi/primitive.hpp",
        "include/boost/spirit/repository/home/qi/primitive/advance.hpp",
        "include/boost/spirit/repository/home/qi/primitive/flush_multi_pass.hpp",
        "include/boost/spirit/repository/home/qi/primitive/iter_pos.hpp",
        "include/boost/spirit/repository/home/support/confix.hpp",
        "include/boost/spirit/repository/home/support/distinct.hpp",
        "include/boost/spirit/repository/home/support/flush_multi_pass.hpp",
        "include/boost/spirit/repository/home/support/kwd.hpp",
        "include/boost/spirit/repository/home/support/seek.hpp",
        "include/boost/spirit/repository/home/support/subrule_context.hpp",
        "include/boost/spirit/repository/include/karma.hpp",
        "include/boost/spirit/repository/include/karma_confix.hpp",
        "include/boost/spirit/repository/include/karma_directive.hpp",
        "include/boost/spirit/repository/include/karma_nonterminal.hpp",
        "include/boost/spirit/repository/include/karma_subrule.hpp",
        "include/boost/spirit/repository/include/qi.hpp",
        "include/boost/spirit/repository/include/qi_advance.hpp",
        "include/boost/spirit/repository/include/qi_confix.hpp",
        "include/boost/spirit/repository/include/qi_directive.hpp",
        "include/boost/spirit/repository/include/qi_distinct.hpp",
        "include/boost/spirit/repository/include/qi_flush_multi_pass.hpp",
        "include/boost/spirit/repository/include/qi_iter_pos.hpp",
        "include/boost/spirit/repository/include/qi_keywords.hpp",
        "include/boost/spirit/repository/include/qi_kwd.hpp",
        "include/boost/spirit/repository/include/qi_nonterminal.hpp",
        "include/boost/spirit/repository/include/qi_primitive.hpp",
        "include/boost/spirit/repository/include/qi_seek.hpp",
        "include/boost/spirit/repository/include/qi_subrule.hpp",
        "include/boost/spirit/version.hpp",
    ],
    copts = [],
    deps = [
        ":headers_only",
        # Because of boost/typeof/std/string.hpp:
        "@boost_typeof//:headers_only",
        # Because of boost/type_traits/is_same.hpp:
        "@boost_type_traits//:headers_only",
        # Because of boost/preprocessor/variadic/elem.hpp:
        "@boost_preprocessor//:headers_only",
        # Because of boost/ref.hpp:
        "@boost_core//:headers_only",
        # Because of boost/optional.hpp:
        "@boost_optional//:headers_only",
        # Because of boost/foreach.hpp:
        "@boost_foreach//:headers_only",
        # Because of boost/fusion/include/zip_view.hpp:
        "@boost_fusion//:headers_only",
        # Because of boost/variant/static_visitor.hpp:
        "@boost_variant//:headers_only",
        # Because of boost/mpl/size.hpp:
        "@boost_mpl//:headers_only",
        # Because of boost/array.hpp:
        "@boost_array//:headers_only",
        # Because of boost/config/no_tr1/cmath.hpp:
        "@boost_config//:headers_only",
        # Because of boost/phoenix/stl/container.hpp:
        "@boost_phoenix//:headers_only",
        # Because of boost/proto/proto_fwd.hpp:
        "@boost_proto//:headers_only",
        # Because of boost/unordered_map.hpp:
        "@boost_unordered//:headers_only",
        # Because of boost/pool/object_pool.hpp:
        "@boost_pool//:headers_only",
        # Because of boost/math/special_functions/fpclassify.hpp:
        "@boost_math//:headers_only",
        # Because of boost/function_types/parameter_types.hpp:
        "@boost_function_types//:headers_only",
        # Because of boost/range/iterator_range.hpp:
        "@boost_range//:headers_only",
        # Because of boost/lexical_cast.hpp:
        "@boost_lexical_cast//:headers_only",
        # Because of boost/assert.hpp:
        "@boost_assert//:headers_only",
        # Because of boost/scoped_array.hpp:
        "@boost_smart_ptr//:headers_only",
        # Because of boost/throw_exception.hpp:
        "@boost_throw_exception//:headers_only",
        # Because of boost/static_assert.hpp:
        "@boost_static_assert//:headers_only",
        # Because of boost/iterator/iterator_traits.hpp:
        "@boost_iterator//:headers_only",
        # Because of boost/utility/result_of.hpp:
        "@boost_utility//:headers_only",
        # Because of boost/integer_traits.hpp:
        "@boost_integer//:headers_only",
        # Because of boost/endian/conversion.hpp:
        "@boost_endian//:headers_only",
        # Because of boost/move/unique_ptr.hpp:
        "@boost_move//:headers_only",
        # Because of boost/iostreams/stream.hpp:
        "@boost_iostreams//:headers_only",
        # Because of boost/filesystem/fstream.hpp:
        "@boost_filesystem//:headers_only",
        # Because of boost/regex.hpp:
        "@boost_regex//:headers_only",
        # Because of boost/function.hpp:
        "@boost_function//:headers_only",
        # Because of boost/thread/once.hpp:
        "@boost_thread//:headers_only",
        # Because of boost/locale/encoding_utf.hpp:
        "@boost_locale//:headers_only",
        # Because of boost/io/ios_state.hpp:
        "@boost_io//:headers_only",
        # Because of boost/serialization/vector.hpp:
        "@boost_serialization//:headers_only",
        # Because of boost/algorithm/string.hpp:
        "@boost_algorithm//:headers_only",
        # Because of boost/concept_check.hpp:
        "@boost_concept_check//:headers_only",
        # Because of boost/detail/endian.hpp:
        "@boost_predef//:headers_only",
        # Because of boost/tti/has_type.hpp:
        "@boost_tti//:headers_only",
        # Because of boost/blank.hpp:
        "@boost_detail//:headers_only",
        # Because of boost/type_index.hpp:
        "@boost_type_index//:headers_only",
        # Because of boost/chrono/duration.hpp:
        "@boost_chrono//:headers_only",
        # Because of boost/system/system_error.hpp:
        "@boost_system//:headers_only",
        # Because of boost/functional/hash_fwd.hpp:
        "@boost_container_hash//:headers_only",
        # Because of boost/container/container_fwd.hpp:
        "@boost_container//:headers_only",
        # Because of boost/is_placeholder.hpp:
        "@boost_bind//:headers_only",
        # Because of boost/atomic.hpp:
        "@boost_atomic//:headers_only",
        # Because of boost/ratio/ratio.hpp:
        "@boost_ratio//:headers_only",
        # Because of boost/date_time/posix_time/posix_time_types.hpp:
        "@boost_date_time//:headers_only",
        # Because of boost/numeric/conversion/cast.hpp:
        "@boost_numeric_conversion//:headers_only",
        # Because of boost/rational.hpp:
        "@boost_rational//:headers_only",
        # Because of boost/tuple/tuple.hpp:
        "@boost_tuple//:headers_only",
        # Because of boost/intrusive/pointer_traits.hpp:
        "@boost_intrusive//:headers_only",
    ],
)
